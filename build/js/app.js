!function(t){var c={};function l(d){if(c[d])return c[d].exports;var n=c[d]={i:d,l:!1,exports:{}};return t[d].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=t,l.c=c,l.d=function(t,c,d){l.o(t,c)||Object.defineProperty(t,c,{enumerable:!0,get:d})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,c){if(1&c&&(t=l(t)),8&c)return t;if(4&c&&"object"==typeof t&&t&&t.__esModule)return t;var d=Object.create(null);if(l.r(d),Object.defineProperty(d,"default",{enumerable:!0,value:t}),2&c&&"string"!=typeof t)for(var n in t)l.d(d,n,function(c){return t[c]}.bind(null,n));return d},l.n=function(t){var c=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(c,"a",c),c},l.o=function(t,c){return Object.prototype.hasOwnProperty.call(t,c)},l.p="js/",l(l.s=2)}([function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\r\n *  howler.js v2.1.1\r\n *  howlerjs.com\r\n *\r\n *  (c) 2013-2018, James Simpson of GoldFire Studios\r\n *  goldfirestudios.com\r\n *\r\n *  MIT License\r\n */\n\n(function () {\n\n\t'use strict';\n\n\t/** Global Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Create the global controller. All contained methods and properties apply\r\n  * to all sounds that are currently playing or will be in the future.\r\n  */\n\n\tvar HowlerGlobal = function HowlerGlobal() {\n\t\tthis.init();\n\t};\n\tHowlerGlobal.prototype = {\n\t\t/**\r\n   * Initialize the global Howler object.\r\n   * @return {Howler}\r\n   */\n\t\tinit: function init() {\n\t\t\tvar self = this || Howler;\n\n\t\t\t// Create a global ID counter.\n\t\t\tself._counter = 1000;\n\n\t\t\t// Pool of unlocked HTML5 Audio objects.\n\t\t\tself._html5AudioPool = [];\n\t\t\tself.html5PoolSize = 10;\n\n\t\t\t// Internal properties.\n\t\t\tself._codecs = {};\n\t\t\tself._howls = [];\n\t\t\tself._muted = false;\n\t\t\tself._volume = 1;\n\t\t\tself._canPlayEvent = 'canplaythrough';\n\t\t\tself._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null;\n\n\t\t\t// Public properties.\n\t\t\tself.masterGain = null;\n\t\t\tself.noAudio = false;\n\t\t\tself.usingWebAudio = true;\n\t\t\tself.autoSuspend = true;\n\t\t\tself.ctx = null;\n\n\t\t\t// Set to false to disable the auto audio unlocker.\n\t\t\tself.autoUnlock = true;\n\n\t\t\t// Setup the various state values for global tracking.\n\t\t\tself._setup();\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Get/set the global volume for all sounds.\r\n   * @param  {Float} vol Volume from 0.0 to 1.0.\r\n   * @return {Howler/Float}     Returns self or current volume.\r\n   */\n\t\tvolume: function volume(vol) {\n\t\t\tvar self = this || Howler;\n\t\t\tvol = parseFloat(vol);\n\n\t\t\t// If we don't have an AudioContext created yet, run the setup.\n\t\t\tif (!self.ctx) {\n\t\t\t\tsetupAudioContext();\n\t\t\t}\n\n\t\t\tif (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n\t\t\t\tself._volume = vol;\n\n\t\t\t\t// Don't update any of the nodes if we are muted.\n\t\t\t\tif (self._muted) {\n\t\t\t\t\treturn self;\n\t\t\t\t}\n\n\t\t\t\t// When using Web Audio, we just need to adjust the master gain.\n\t\t\t\tif (self.usingWebAudio) {\n\t\t\t\t\tself.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n\t\t\t\t}\n\n\t\t\t\t// Loop through and change volume for all HTML5 audio nodes.\n\t\t\t\tfor (var i = 0; i < self._howls.length; i++) {\n\t\t\t\t\tif (!self._howls[i]._webAudio) {\n\t\t\t\t\t\t// Get all of the sounds in this Howl group.\n\t\t\t\t\t\tvar ids = self._howls[i]._getSoundIds();\n\n\t\t\t\t\t\t// Loop through all sounds and change the volumes.\n\t\t\t\t\t\tfor (var j = 0; j < ids.length; j++) {\n\t\t\t\t\t\t\tvar sound = self._howls[i]._soundById(ids[j]);\n\n\t\t\t\t\t\t\tif (sound && sound._node) {\n\t\t\t\t\t\t\t\tsound._node.volume = sound._volume * vol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\treturn self._volume;\n\t\t},\n\n\t\t/**\r\n   * Handle muting and unmuting globally.\r\n   * @param  {Boolean} muted Is muted or not.\r\n   */\n\t\tmute: function mute(muted) {\n\t\t\tvar self = this || Howler;\n\n\t\t\t// If we don't have an AudioContext created yet, run the setup.\n\t\t\tif (!self.ctx) {\n\t\t\t\tsetupAudioContext();\n\t\t\t}\n\n\t\t\tself._muted = muted;\n\n\t\t\t// With Web Audio, we just need to mute the master gain.\n\t\t\tif (self.usingWebAudio) {\n\t\t\t\tself.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n\t\t\t}\n\n\t\t\t// Loop through and mute all HTML5 Audio nodes.\n\t\t\tfor (var i = 0; i < self._howls.length; i++) {\n\t\t\t\tif (!self._howls[i]._webAudio) {\n\t\t\t\t\t// Get all of the sounds in this Howl group.\n\t\t\t\t\tvar ids = self._howls[i]._getSoundIds();\n\n\t\t\t\t\t// Loop through all sounds and mark the audio node as muted.\n\t\t\t\t\tfor (var j = 0; j < ids.length; j++) {\n\t\t\t\t\t\tvar sound = self._howls[i]._soundById(ids[j]);\n\n\t\t\t\t\t\tif (sound && sound._node) {\n\t\t\t\t\t\t\tsound._node.muted = muted ? true : sound._muted;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Unload and destroy all currently loaded Howl objects.\r\n   * @return {Howler}\r\n   */\n\t\tunload: function unload() {\n\t\t\tvar self = this || Howler;\n\n\t\t\tfor (var i = self._howls.length - 1; i >= 0; i--) {\n\t\t\t\tself._howls[i].unload();\n\t\t\t}\n\n\t\t\t// Create a new AudioContext to make sure it is fully reset.\n\t\t\tif (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n\t\t\t\tself.ctx.close();\n\t\t\t\tself.ctx = null;\n\t\t\t\tsetupAudioContext();\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Check for codec support of specific extension.\r\n   * @param  {String} ext Audio file extention.\r\n   * @return {Boolean}\r\n   */\n\t\tcodecs: function codecs(ext) {\n\t\t\treturn (this || Howler)._codecs[ext.replace(/^x-/, '')];\n\t\t},\n\n\t\t/**\r\n   * Setup various state values for global tracking.\r\n   * @return {Howler}\r\n   */\n\t\t_setup: function _setup() {\n\t\t\tvar self = this || Howler;\n\n\t\t\t// Keeps track of the suspend/resume state of the AudioContext.\n\t\t\tself.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n\t\t\t// Automatically begin the 30-second suspend process\n\t\t\tself._autoSuspend();\n\n\t\t\t// Check if audio is available.\n\t\t\tif (!self.usingWebAudio) {\n\t\t\t\t// No audio is available on this system if noAudio is set to true.\n\t\t\t\tif (typeof Audio !== 'undefined') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar test = new Audio();\n\n\t\t\t\t\t\t// Check if the canplaythrough event is available.\n\t\t\t\t\t\tif (typeof test.oncanplaythrough === 'undefined') {\n\t\t\t\t\t\t\tself._canPlayEvent = 'canplay';\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tself.noAudio = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tself.noAudio = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Test to make sure audio isn't disabled in Internet Explorer.\n\t\t\ttry {\n\t\t\t\tvar test = new Audio();\n\t\t\t\tif (test.muted) {\n\t\t\t\t\tself.noAudio = true;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\t// Check for supported codecs.\n\t\t\tif (!self.noAudio) {\n\t\t\t\tself._setupCodecs();\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Check for browser support for various codecs and cache the results.\r\n   * @return {Howler}\r\n   */\n\t\t_setupCodecs: function _setupCodecs() {\n\t\t\tvar self = this || Howler;\n\t\t\tvar audioTest = null;\n\n\t\t\t// Must wrap in a try/catch because IE11 in server mode throws an error.\n\t\t\ttry {\n\t\t\t\taudioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n\t\t\t} catch (err) {\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\tif (!audioTest || typeof audioTest.canPlayType !== 'function') {\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\tvar mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n\t\t\t// Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\t\t\tvar checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n\t\t\tvar isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n\n\t\t\tself._codecs = {\n\t\t\t\tmp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n\t\t\t\tmpeg: !!mpegTest,\n\t\t\t\topus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n\t\t\t\togg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n\t\t\t\toga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n\t\t\t\twav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n\t\t\t\taac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n\t\t\t\tcaf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n\t\t\t\tm4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n\t\t\t\tmp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n\t\t\t\tweba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n\t\t\t\twebm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n\t\t\t\tdolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n\t\t\t\tflac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n\t\t\t};\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Some browsers/devices will only allow audio to be played after a user interaction.\r\n   * Attempt to automatically unlock audio on the first user interaction.\r\n   * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\r\n   * @return {Howler}\r\n   */\n\t\t_unlockAudio: function _unlockAudio() {\n\t\t\tvar self = this || Howler;\n\n\t\t\t// Only run this on certain browsers/devices.\n\t\t\tvar shouldUnlock = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(self._navigator && self._navigator.userAgent);\n\t\t\tif (self._audioUnlocked || !self.ctx || !shouldUnlock) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself._audioUnlocked = false;\n\t\t\tself.autoUnlock = false;\n\n\t\t\t// Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n\t\t\t// Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n\t\t\t// By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\t\t\tif (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n\t\t\t\tself._mobileUnloaded = true;\n\t\t\t\tself.unload();\n\t\t\t}\n\n\t\t\t// Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n\t\t\t// http://stackoverflow.com/questions/24119684\n\t\t\tself._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n\t\t\t// Call this method on touch start to create and play a buffer,\n\t\t\t// then check if the audio actually played to determine if\n\t\t\t// audio has now been unlocked on iOS, Android, etc.\n\t\t\tvar unlock = function unlock(e) {\n\t\t\t\t// Create a pool of unlocked HTML5 Audio objects that can\n\t\t\t\t// be used for playing sounds without user interaction. HTML5\n\t\t\t\t// Audio objects must be individually unlocked, as opposed\n\t\t\t\t// to the WebAudio API which only needs a single activation.\n\t\t\t\t// This must occur before WebAudio setup or the source.onended\n\t\t\t\t// event will not fire.\n\t\t\t\tfor (var i = 0; i < self.html5PoolSize; i++) {\n\t\t\t\t\tvar audioNode = new Audio();\n\n\t\t\t\t\t// Mark this Audio object as unlocked to ensure it can get returned\n\t\t\t\t\t// to the unlocked pool when released.\n\t\t\t\t\taudioNode._unlocked = true;\n\n\t\t\t\t\t// Add the audio node to the pool.\n\t\t\t\t\tself._releaseHtml5Audio(audioNode);\n\t\t\t\t}\n\n\t\t\t\t// Loop through any assigned audio nodes and unlock them.\n\t\t\t\tfor (var i = 0; i < self._howls.length; i++) {\n\t\t\t\t\tif (!self._howls[i]._webAudio) {\n\t\t\t\t\t\t// Get all of the sounds in this Howl group.\n\t\t\t\t\t\tvar ids = self._howls[i]._getSoundIds();\n\n\t\t\t\t\t\t// Loop through all sounds and unlock the audio nodes.\n\t\t\t\t\t\tfor (var j = 0; j < ids.length; j++) {\n\t\t\t\t\t\t\tvar sound = self._howls[i]._soundById(ids[j]);\n\n\t\t\t\t\t\t\tif (sound && sound._node && !sound._node._unlocked) {\n\t\t\t\t\t\t\t\tsound._node._unlocked = true;\n\t\t\t\t\t\t\t\tsound._node.load();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fix Android can not play in suspend state.\n\t\t\t\tself._autoResume();\n\n\t\t\t\t// Create an empty buffer.\n\t\t\t\tvar source = self.ctx.createBufferSource();\n\t\t\t\tsource.buffer = self._scratchBuffer;\n\t\t\t\tsource.connect(self.ctx.destination);\n\n\t\t\t\t// Play the empty buffer.\n\t\t\t\tif (typeof source.start === 'undefined') {\n\t\t\t\t\tsource.noteOn(0);\n\t\t\t\t} else {\n\t\t\t\t\tsource.start(0);\n\t\t\t\t}\n\n\t\t\t\t// Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\t\t\t\tif (typeof self.ctx.resume === 'function') {\n\t\t\t\t\tself.ctx.resume();\n\t\t\t\t}\n\n\t\t\t\t// Setup a timeout to check that we are unlocked on the next event loop.\n\t\t\t\tsource.onended = function () {\n\t\t\t\t\tsource.disconnect(0);\n\n\t\t\t\t\t// Update the unlocked state and prevent this check from happening again.\n\t\t\t\t\tself._audioUnlocked = true;\n\n\t\t\t\t\t// Remove the touch start listener.\n\t\t\t\t\tdocument.removeEventListener('touchstart', unlock, true);\n\t\t\t\t\tdocument.removeEventListener('touchend', unlock, true);\n\t\t\t\t\tdocument.removeEventListener('click', unlock, true);\n\n\t\t\t\t\t// Let all sounds know that audio has been unlocked.\n\t\t\t\t\tfor (var i = 0; i < self._howls.length; i++) {\n\t\t\t\t\t\tself._howls[i]._emit('unlock');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t// Setup a touch start listener to attempt an unlock in.\n\t\t\tdocument.addEventListener('touchstart', unlock, true);\n\t\t\tdocument.addEventListener('touchend', unlock, true);\n\t\t\tdocument.addEventListener('click', unlock, true);\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Get an unlocked HTML5 Audio object from the pool. If none are left,\r\n   * return a new Audio object and throw a warning.\r\n   * @return {Audio} HTML5 Audio object.\r\n   */\n\t\t_obtainHtml5Audio: function _obtainHtml5Audio() {\n\t\t\tvar self = this || Howler;\n\n\t\t\t// Return the next object from the pool if one exists.\n\t\t\tif (self._html5AudioPool.length) {\n\t\t\t\treturn self._html5AudioPool.pop();\n\t\t\t}\n\n\t\t\t//.Check if the audio is locked and throw a warning.\n\t\t\tvar testPlay = new Audio().play();\n\t\t\tif (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n\t\t\t\ttestPlay.catch(function () {\n\t\t\t\t\tconsole.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn new Audio();\n\t\t},\n\n\t\t/**\r\n   * Return an activated HTML5 Audio object to the pool.\r\n   * @return {Howler}\r\n   */\n\t\t_releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n\t\t\tvar self = this || Howler;\n\n\t\t\t// Don't add audio to the pool if we don't know if it has been unlocked.\n\t\t\tif (audio._unlocked) {\n\t\t\t\tself._html5AudioPool.push(audio);\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\r\n   * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\r\n   * @return {Howler}\r\n   */\n\t\t_autoSuspend: function _autoSuspend() {\n\t\t\tvar self = this;\n\n\t\t\tif (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check if any sounds are playing.\n\t\t\tfor (var i = 0; i < self._howls.length; i++) {\n\t\t\t\tif (self._howls[i]._webAudio) {\n\t\t\t\t\tfor (var j = 0; j < self._howls[i]._sounds.length; j++) {\n\t\t\t\t\t\tif (!self._howls[i]._sounds[j]._paused) {\n\t\t\t\t\t\t\treturn self;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (self._suspendTimer) {\n\t\t\t\tclearTimeout(self._suspendTimer);\n\t\t\t}\n\n\t\t\t// If no sound has played after 30 seconds, suspend the context.\n\t\t\tself._suspendTimer = setTimeout(function () {\n\t\t\t\tif (!self.autoSuspend) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself._suspendTimer = null;\n\t\t\t\tself.state = 'suspending';\n\t\t\t\tself.ctx.suspend().then(function () {\n\t\t\t\t\tself.state = 'suspended';\n\n\t\t\t\t\tif (self._resumeAfterSuspend) {\n\t\t\t\t\t\tdelete self._resumeAfterSuspend;\n\t\t\t\t\t\tself._autoResume();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 30000);\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Automatically resume the Web Audio AudioContext when a new sound is played.\r\n   * @return {Howler}\r\n   */\n\t\t_autoResume: function _autoResume() {\n\t\t\tvar self = this;\n\n\t\t\tif (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (self.state === 'running' && self._suspendTimer) {\n\t\t\t\tclearTimeout(self._suspendTimer);\n\t\t\t\tself._suspendTimer = null;\n\t\t\t} else if (self.state === 'suspended') {\n\t\t\t\tself.ctx.resume().then(function () {\n\t\t\t\t\tself.state = 'running';\n\n\t\t\t\t\t// Emit to all Howls that the audio has resumed.\n\t\t\t\t\tfor (var i = 0; i < self._howls.length; i++) {\n\t\t\t\t\t\tself._howls[i]._emit('resume');\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (self._suspendTimer) {\n\t\t\t\t\tclearTimeout(self._suspendTimer);\n\t\t\t\t\tself._suspendTimer = null;\n\t\t\t\t}\n\t\t\t} else if (self.state === 'suspending') {\n\t\t\t\tself._resumeAfterSuspend = true;\n\t\t\t}\n\n\t\t\treturn self;\n\t\t}\n\t};\n\n\t// Setup the global audio controller.\n\tvar Howler = new HowlerGlobal();\n\n\t/** Group Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Create an audio group controller.\r\n  * @param {Object} o Passed in properties for this group.\r\n  */\n\tvar Howl = function Howl(o) {\n\t\tvar self = this;\n\n\t\t// Throw an error if no source is provided.\n\t\tif (!o.src || o.src.length === 0) {\n\t\t\tconsole.error('An array of source files must be passed with any new Howl.');\n\t\t\treturn;\n\t\t}\n\n\t\tself.init(o);\n\t};\n\tHowl.prototype = {\n\t\t/**\r\n   * Initialize a new Howl group object.\r\n   * @param  {Object} o Passed in properties for this group.\r\n   * @return {Howl}\r\n   */\n\t\tinit: function init(o) {\n\t\t\tvar self = this;\n\n\t\t\t// If we don't have an AudioContext created yet, run the setup.\n\t\t\tif (!Howler.ctx) {\n\t\t\t\tsetupAudioContext();\n\t\t\t}\n\n\t\t\t// Setup user-defined default properties.\n\t\t\tself._autoplay = o.autoplay || false;\n\t\t\tself._format = typeof o.format !== 'string' ? o.format : [o.format];\n\t\t\tself._html5 = o.html5 || false;\n\t\t\tself._muted = o.mute || false;\n\t\t\tself._loop = o.loop || false;\n\t\t\tself._pool = o.pool || 5;\n\t\t\tself._preload = typeof o.preload === 'boolean' ? o.preload : true;\n\t\t\tself._rate = o.rate || 1;\n\t\t\tself._sprite = o.sprite || {};\n\t\t\tself._src = typeof o.src !== 'string' ? o.src : [o.src];\n\t\t\tself._volume = o.volume !== undefined ? o.volume : 1;\n\t\t\tself._xhrWithCredentials = o.xhrWithCredentials || false;\n\n\t\t\t// Setup all other default properties.\n\t\t\tself._duration = 0;\n\t\t\tself._state = 'unloaded';\n\t\t\tself._sounds = [];\n\t\t\tself._endTimers = {};\n\t\t\tself._queue = [];\n\t\t\tself._playLock = false;\n\n\t\t\t// Setup event listeners.\n\t\t\tself._onend = o.onend ? [{\n\t\t\t\tfn: o.onend\n\t\t\t}] : [];\n\t\t\tself._onfade = o.onfade ? [{\n\t\t\t\tfn: o.onfade\n\t\t\t}] : [];\n\t\t\tself._onload = o.onload ? [{\n\t\t\t\tfn: o.onload\n\t\t\t}] : [];\n\t\t\tself._onloaderror = o.onloaderror ? [{\n\t\t\t\tfn: o.onloaderror\n\t\t\t}] : [];\n\t\t\tself._onplayerror = o.onplayerror ? [{\n\t\t\t\tfn: o.onplayerror\n\t\t\t}] : [];\n\t\t\tself._onpause = o.onpause ? [{\n\t\t\t\tfn: o.onpause\n\t\t\t}] : [];\n\t\t\tself._onplay = o.onplay ? [{\n\t\t\t\tfn: o.onplay\n\t\t\t}] : [];\n\t\t\tself._onstop = o.onstop ? [{\n\t\t\t\tfn: o.onstop\n\t\t\t}] : [];\n\t\t\tself._onmute = o.onmute ? [{\n\t\t\t\tfn: o.onmute\n\t\t\t}] : [];\n\t\t\tself._onvolume = o.onvolume ? [{\n\t\t\t\tfn: o.onvolume\n\t\t\t}] : [];\n\t\t\tself._onrate = o.onrate ? [{\n\t\t\t\tfn: o.onrate\n\t\t\t}] : [];\n\t\t\tself._onseek = o.onseek ? [{\n\t\t\t\tfn: o.onseek\n\t\t\t}] : [];\n\t\t\tself._onunlock = o.onunlock ? [{\n\t\t\t\tfn: o.onunlock\n\t\t\t}] : [];\n\t\t\tself._onresume = [];\n\n\t\t\t// Web Audio or HTML5 Audio?\n\t\t\tself._webAudio = Howler.usingWebAudio && !self._html5;\n\n\t\t\t// Automatically try to enable audio.\n\t\t\tif (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n\t\t\t\tHowler._unlockAudio();\n\t\t\t}\n\n\t\t\t// Keep track of this Howl group in the global controller.\n\t\t\tHowler._howls.push(self);\n\n\t\t\t// If they selected autoplay, add a play event to the load queue.\n\t\t\tif (self._autoplay) {\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'play',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.play();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Load the source file unless otherwise specified.\n\t\t\tif (self._preload) {\n\t\t\t\tself.load();\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Load the audio file.\r\n   * @return {Howler}\r\n   */\n\t\tload: function load() {\n\t\t\tvar self = this;\n\t\t\tvar url = null;\n\n\t\t\t// If no audio is available, quit immediately.\n\t\t\tif (Howler.noAudio) {\n\t\t\t\tself._emit('loaderror', null, 'No audio support.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure our source is in an array.\n\t\t\tif (typeof self._src === 'string') {\n\t\t\t\tself._src = [self._src];\n\t\t\t}\n\n\t\t\t// Loop through the sources and pick the first one that is compatible.\n\t\t\tfor (var i = 0; i < self._src.length; i++) {\n\t\t\t\tvar ext, str;\n\n\t\t\t\tif (self._format && self._format[i]) {\n\t\t\t\t\t// If an extension was specified, use that instead.\n\t\t\t\t\text = self._format[i];\n\t\t\t\t} else {\n\t\t\t\t\t// Make sure the source is a string.\n\t\t\t\t\tstr = self._src[i];\n\t\t\t\t\tif (typeof str !== 'string') {\n\t\t\t\t\t\tself._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extract the file extension from the URL or base64 data URI.\n\t\t\t\t\text = /^data:audio\\/([^;,]+);/i.exec(str);\n\t\t\t\t\tif (!ext) {\n\t\t\t\t\t\text = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ext) {\n\t\t\t\t\t\text = ext[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Log a warning if no extension was found.\n\t\t\t\tif (!ext) {\n\t\t\t\t\tconsole.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n\t\t\t\t}\n\n\t\t\t\t// Check if this extension is available.\n\t\t\t\tif (ext && Howler.codecs(ext)) {\n\t\t\t\t\turl = self._src[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!url) {\n\t\t\t\tself._emit('loaderror', null, 'No codec support for selected audio sources.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself._src = url;\n\t\t\tself._state = 'loading';\n\n\t\t\t// If the hosting page is HTTPS and the source isn't,\n\t\t\t// drop down to HTML5 Audio to avoid Mixed Content errors.\n\t\t\tif (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n\t\t\t\tself._html5 = true;\n\t\t\t\tself._webAudio = false;\n\t\t\t}\n\n\t\t\t// Create a new sound object and add it to the pool.\n\t\t\tnew Sound(self);\n\n\t\t\t// Load and decode the audio data for playback.\n\t\t\tif (self._webAudio) {\n\t\t\t\tloadBuffer(self);\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Play a sound or resume previous playback.\r\n   * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\r\n   * @param  {Boolean} internal Internal Use: true prevents event firing.\r\n   * @return {Number}          Sound ID.\r\n   */\n\t\tplay: function play(sprite, internal) {\n\t\t\tvar self = this;\n\t\t\tvar id = null;\n\n\t\t\t// Determine if a sprite, sound id or nothing was passed\n\t\t\tif (typeof sprite === 'number') {\n\t\t\t\tid = sprite;\n\t\t\t\tsprite = null;\n\t\t\t} else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n\t\t\t\t// If the passed sprite doesn't exist, do nothing.\n\t\t\t\treturn null;\n\t\t\t} else if (typeof sprite === 'undefined') {\n\t\t\t\t// Use the default sound sprite (plays the full audio length).\n\t\t\t\tsprite = '__default';\n\n\t\t\t\t// Check if there is a single paused sound that isn't ended. \n\t\t\t\t// If there is, play that sound. If not, continue as usual.  \n\t\t\t\tif (!self._playLock) {\n\t\t\t\t\tvar num = 0;\n\t\t\t\t\tfor (var i = 0; i < self._sounds.length; i++) {\n\t\t\t\t\t\tif (self._sounds[i]._paused && !self._sounds[i]._ended) {\n\t\t\t\t\t\t\tnum++;\n\t\t\t\t\t\t\tid = self._sounds[i]._id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (num === 1) {\n\t\t\t\t\t\tsprite = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tid = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get the selected node, or get one from the pool.\n\t\t\tvar sound = id ? self._soundById(id) : self._inactiveSound();\n\n\t\t\t// If the sound doesn't exist, do nothing.\n\t\t\tif (!sound) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Select the sprite definition.\n\t\t\tif (id && !sprite) {\n\t\t\t\tsprite = sound._sprite || '__default';\n\t\t\t}\n\n\t\t\t// If the sound hasn't loaded, we must wait to get the audio's duration.\n\t\t\t// We also need to wait to make sure we don't run into race conditions with\n\t\t\t// the order of function calls.\n\t\t\tif (self._state !== 'loaded') {\n\t\t\t\t// Set the sprite value on this sound.\n\t\t\t\tsound._sprite = sprite;\n\n\t\t\t\t// Mark this sound as not ended in case another sound is played before this one loads.\n\t\t\t\tsound._ended = false;\n\n\t\t\t\t// Add the sound to the queue to be played on load.\n\t\t\t\tvar soundId = sound._id;\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'play',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.play(soundId);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn soundId;\n\t\t\t}\n\n\t\t\t// Don't play the sound if an id was passed and it is already playing.\n\t\t\tif (id && !sound._paused) {\n\t\t\t\t// Trigger the play event, in order to keep iterating through queue.\n\t\t\t\tif (!internal) {\n\t\t\t\t\tself._loadQueue('play');\n\t\t\t\t}\n\n\t\t\t\treturn sound._id;\n\t\t\t}\n\n\t\t\t// Make sure the AudioContext isn't suspended, and resume it if it is.\n\t\t\tif (self._webAudio) {\n\t\t\t\tHowler._autoResume();\n\t\t\t}\n\n\t\t\t// Determine how long to play for and where to start playing.\n\t\t\tvar seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n\t\t\tvar duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n\t\t\tvar timeout = duration * 1000 / Math.abs(sound._rate);\n\t\t\tvar start = self._sprite[sprite][0] / 1000;\n\t\t\tvar stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n\t\t\tvar loop = !!(sound._loop || self._sprite[sprite][2]);\n\t\t\tsound._sprite = sprite;\n\n\t\t\t// Mark the sound as ended instantly so that this async playback\n\t\t\t// doesn't get grabbed by another call to play while this one waits to start.\n\t\t\tsound._ended = false;\n\n\t\t\t// Update the parameters of the sound.\n\t\t\tvar setParams = function setParams() {\n\t\t\t\tsound._paused = false;\n\t\t\t\tsound._seek = seek;\n\t\t\t\tsound._start = start;\n\t\t\t\tsound._stop = stop;\n\t\t\t\tsound._loop = loop;\n\t\t\t};\n\n\t\t\t// End the sound instantly if seek is at the end.\n\t\t\tif (seek >= stop) {\n\t\t\t\tself._ended(sound);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Begin the actual playback.\n\t\t\tvar node = sound._node;\n\t\t\tif (self._webAudio) {\n\t\t\t\t// Fire this when the sound is ready to play to begin Web Audio playback.\n\t\t\t\tvar playWebAudio = function playWebAudio() {\n\t\t\t\t\tself._playLock = false;\n\t\t\t\t\tsetParams();\n\t\t\t\t\tself._refreshBuffer(sound);\n\n\t\t\t\t\t// Setup the playback params.\n\t\t\t\t\tvar vol = sound._muted || self._muted ? 0 : sound._volume;\n\t\t\t\t\tnode.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n\t\t\t\t\tsound._playStart = Howler.ctx.currentTime;\n\n\t\t\t\t\t// Play the sound using the supported method.\n\t\t\t\t\tif (typeof node.bufferSource.start === 'undefined') {\n\t\t\t\t\t\tsound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Start a new timer if none is present.\n\t\t\t\t\tif (timeout !== Infinity) {\n\t\t\t\t\t\tself._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!internal) {\n\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\tself._emit('play', sound._id);\n\t\t\t\t\t\t\tself._loadQueue();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (Howler.state === 'running') {\n\t\t\t\t\tplayWebAudio();\n\t\t\t\t} else {\n\t\t\t\t\tself._playLock = true;\n\n\t\t\t\t\t// Wait for the audio context to resume before playing.\n\t\t\t\t\tself.once('resume', playWebAudio);\n\n\t\t\t\t\t// Cancel the end timer.\n\t\t\t\t\tself._clearTimer(sound._id);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Fire this when the sound is ready to play to begin HTML5 Audio playback.\n\t\t\t\tvar playHtml5 = function playHtml5() {\n\t\t\t\t\tnode.currentTime = seek;\n\t\t\t\t\tnode.muted = sound._muted || self._muted || Howler._muted || node.muted;\n\t\t\t\t\tnode.volume = sound._volume * Howler.volume();\n\t\t\t\t\tnode.playbackRate = sound._rate;\n\n\t\t\t\t\t// Some browsers will throw an error if this is called without user interaction.\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar play = node.play();\n\n\t\t\t\t\t\t// Support older browsers that don't support promises, and thus don't have this issue.\n\t\t\t\t\t\tif (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n\t\t\t\t\t\t\t// Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n\t\t\t\t\t\t\tself._playLock = true;\n\n\t\t\t\t\t\t\t// Set param values immediately.\n\t\t\t\t\t\t\tsetParams();\n\n\t\t\t\t\t\t\t// Releases the lock and executes queued actions.\n\t\t\t\t\t\t\tplay.then(function () {\n\t\t\t\t\t\t\t\tself._playLock = false;\n\t\t\t\t\t\t\t\tnode._unlocked = true;\n\t\t\t\t\t\t\t\tif (!internal) {\n\t\t\t\t\t\t\t\t\tself._emit('play', sound._id);\n\t\t\t\t\t\t\t\t\tself._loadQueue();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}).catch(function () {\n\t\t\t\t\t\t\t\tself._playLock = false;\n\t\t\t\t\t\t\t\tself._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n\t\t\t\t\t\t\t\t// Reset the ended and paused values.\n\t\t\t\t\t\t\t\tsound._ended = true;\n\t\t\t\t\t\t\t\tsound._paused = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (!internal) {\n\t\t\t\t\t\t\tself._playLock = false;\n\t\t\t\t\t\t\tsetParams();\n\t\t\t\t\t\t\tself._emit('play', sound._id);\n\t\t\t\t\t\t\tself._loadQueue();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Setting rate before playing won't work in IE, so we set it again here.\n\t\t\t\t\t\tnode.playbackRate = sound._rate;\n\n\t\t\t\t\t\t// If the node is still paused, then we can assume there was a playback issue.\n\t\t\t\t\t\tif (node.paused) {\n\t\t\t\t\t\t\tself._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Setup the end timer on sprites or listen for the ended event.\n\t\t\t\t\t\tif (sprite !== '__default' || sound._loop) {\n\t\t\t\t\t\t\tself._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself._endTimers[sound._id] = function () {\n\t\t\t\t\t\t\t\t// Fire ended on this audio node.\n\t\t\t\t\t\t\t\tself._ended(sound);\n\n\t\t\t\t\t\t\t\t// Clear this listener.\n\t\t\t\t\t\t\t\tnode.removeEventListener('ended', self._endTimers[sound._id], false);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tnode.addEventListener('ended', self._endTimers[sound._id], false);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tself._emit('playerror', sound._id, err);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\t\t\t\tvar loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\t\t\t\tif (node.readyState >= 3 || loadedNoReadyState) {\n\t\t\t\t\tplayHtml5();\n\t\t\t\t} else {\n\t\t\t\t\tself._playLock = true;\n\n\t\t\t\t\tvar listener = function listener() {\n\t\t\t\t\t\t// Begin playback.\n\t\t\t\t\t\tplayHtml5();\n\n\t\t\t\t\t\t// Clear this listener.\n\t\t\t\t\t\tnode.removeEventListener(Howler._canPlayEvent, listener, false);\n\t\t\t\t\t};\n\t\t\t\t\tnode.addEventListener(Howler._canPlayEvent, listener, false);\n\n\t\t\t\t\t// Cancel the end timer.\n\t\t\t\t\tself._clearTimer(sound._id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn sound._id;\n\t\t},\n\n\t\t/**\r\n   * Pause playback and save current position.\r\n   * @param  {Number} id The sound ID (empty to pause all in group).\r\n   * @return {Howl}\r\n   */\n\t\tpause: function pause(id) {\n\t\t\tvar self = this;\n\n\t\t\t// If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'pause',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.pause(id);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// If no id is passed, get all ID's to be paused.\n\t\t\tvar ids = self._getSoundIds(id);\n\n\t\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t\t// Clear the end timer.\n\t\t\t\tself._clearTimer(ids[i]);\n\n\t\t\t\t// Get the sound.\n\t\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\t\tif (sound && !sound._paused) {\n\t\t\t\t\t// Reset the seek position.\n\t\t\t\t\tsound._seek = self.seek(ids[i]);\n\t\t\t\t\tsound._rateSeek = 0;\n\t\t\t\t\tsound._paused = true;\n\n\t\t\t\t\t// Stop currently running fades.\n\t\t\t\t\tself._stopFade(ids[i]);\n\n\t\t\t\t\tif (sound._node) {\n\t\t\t\t\t\tif (self._webAudio) {\n\t\t\t\t\t\t\t// Make sure the sound has been created.\n\t\t\t\t\t\t\tif (!sound._node.bufferSource) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (typeof sound._node.bufferSource.stop === 'undefined') {\n\t\t\t\t\t\t\t\tsound._node.bufferSource.noteOff(0);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsound._node.bufferSource.stop(0);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Clean up the buffer source.\n\t\t\t\t\t\t\tself._cleanBuffer(sound._node);\n\t\t\t\t\t\t} else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n\t\t\t\t\t\t\tsound._node.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fire the pause event, unless `true` is passed as the 2nd argument.\n\t\t\t\tif (!arguments[1]) {\n\t\t\t\t\tself._emit('pause', sound ? sound._id : null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Stop playback and reset to start.\r\n   * @param  {Number} id The sound ID (empty to stop all in group).\r\n   * @param  {Boolean} internal Internal Use: true prevents event firing.\r\n   * @return {Howl}\r\n   */\n\t\tstop: function stop(id, internal) {\n\t\t\tvar self = this;\n\n\t\t\t// If the sound hasn't loaded, add it to the load queue to stop when capable.\n\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'stop',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.stop(id);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// If no id is passed, get all ID's to be stopped.\n\t\t\tvar ids = self._getSoundIds(id);\n\n\t\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t\t// Clear the end timer.\n\t\t\t\tself._clearTimer(ids[i]);\n\n\t\t\t\t// Get the sound.\n\t\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\t\tif (sound) {\n\t\t\t\t\t// Reset the seek position.\n\t\t\t\t\tsound._seek = sound._start || 0;\n\t\t\t\t\tsound._rateSeek = 0;\n\t\t\t\t\tsound._paused = true;\n\t\t\t\t\tsound._ended = true;\n\n\t\t\t\t\t// Stop currently running fades.\n\t\t\t\t\tself._stopFade(ids[i]);\n\n\t\t\t\t\tif (sound._node) {\n\t\t\t\t\t\tif (self._webAudio) {\n\t\t\t\t\t\t\t// Make sure the sound's AudioBufferSourceNode has been created.\n\t\t\t\t\t\t\tif (sound._node.bufferSource) {\n\t\t\t\t\t\t\t\tif (typeof sound._node.bufferSource.stop === 'undefined') {\n\t\t\t\t\t\t\t\t\tsound._node.bufferSource.noteOff(0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsound._node.bufferSource.stop(0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Clean up the buffer source.\n\t\t\t\t\t\t\t\tself._cleanBuffer(sound._node);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n\t\t\t\t\t\t\tsound._node.currentTime = sound._start || 0;\n\t\t\t\t\t\t\tsound._node.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!internal) {\n\t\t\t\t\t\tself._emit('stop', sound._id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Mute/unmute a single sound or all sounds in this Howl group.\r\n   * @param  {Boolean} muted Set to true to mute and false to unmute.\r\n   * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\r\n   * @return {Howl}\r\n   */\n\t\tmute: function mute(muted, id) {\n\t\t\tvar self = this;\n\n\t\t\t// If the sound hasn't loaded, add it to the load queue to mute when capable.\n\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'mute',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.mute(muted, id);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// If applying mute/unmute to all sounds, update the group's value.\n\t\t\tif (typeof id === 'undefined') {\n\t\t\t\tif (typeof muted === 'boolean') {\n\t\t\t\t\tself._muted = muted;\n\t\t\t\t} else {\n\t\t\t\t\treturn self._muted;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If no id is passed, get all ID's to be muted.\n\t\t\tvar ids = self._getSoundIds(id);\n\n\t\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t\t// Get the sound.\n\t\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\t\tif (sound) {\n\t\t\t\t\tsound._muted = muted;\n\n\t\t\t\t\t// Cancel active fade and set the volume to the end value.\n\t\t\t\t\tif (sound._interval) {\n\t\t\t\t\t\tself._stopFade(sound._id);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self._webAudio && sound._node) {\n\t\t\t\t\t\tsound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n\t\t\t\t\t} else if (sound._node) {\n\t\t\t\t\t\tsound._node.muted = Howler._muted ? true : muted;\n\t\t\t\t\t}\n\n\t\t\t\t\tself._emit('mute', sound._id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\r\n   *   volume() -> Returns the group's volume value.\r\n   *   volume(id) -> Returns the sound id's current volume.\r\n   *   volume(vol) -> Sets the volume of all sounds in this Howl group.\r\n   *   volume(vol, id) -> Sets the volume of passed sound id.\r\n   * @return {Howl/Number} Returns self or current volume.\r\n   */\n\t\tvolume: function volume() {\n\t\t\tvar self = this;\n\t\t\tvar args = arguments;\n\t\t\tvar vol, id;\n\n\t\t\t// Determine the values based on arguments.\n\t\t\tif (args.length === 0) {\n\t\t\t\t// Return the value of the groups' volume.\n\t\t\t\treturn self._volume;\n\t\t\t} else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n\t\t\t\t// First check if this is an ID, and if not, assume it is a new volume.\n\t\t\t\tvar ids = self._getSoundIds();\n\t\t\t\tvar index = ids.indexOf(args[0]);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tid = parseInt(args[0], 10);\n\t\t\t\t} else {\n\t\t\t\t\tvol = parseFloat(args[0]);\n\t\t\t\t}\n\t\t\t} else if (args.length >= 2) {\n\t\t\t\tvol = parseFloat(args[0]);\n\t\t\t\tid = parseInt(args[1], 10);\n\t\t\t}\n\n\t\t\t// Update the volume or return the current volume.\n\t\t\tvar sound;\n\t\t\tif (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n\t\t\t\t// If the sound hasn't loaded, add it to the load queue to change volume when capable.\n\t\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\t\tself._queue.push({\n\t\t\t\t\t\tevent: 'volume',\n\t\t\t\t\t\taction: function action() {\n\t\t\t\t\t\t\tself.volume.apply(self, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn self;\n\t\t\t\t}\n\n\t\t\t\t// Set the group volume.\n\t\t\t\tif (typeof id === 'undefined') {\n\t\t\t\t\tself._volume = vol;\n\t\t\t\t}\n\n\t\t\t\t// Update one or all volumes.\n\t\t\t\tid = self._getSoundIds(id);\n\t\t\t\tfor (var i = 0; i < id.length; i++) {\n\t\t\t\t\t// Get the sound.\n\t\t\t\t\tsound = self._soundById(id[i]);\n\n\t\t\t\t\tif (sound) {\n\t\t\t\t\t\tsound._volume = vol;\n\n\t\t\t\t\t\t// Stop currently running fades.\n\t\t\t\t\t\tif (!args[2]) {\n\t\t\t\t\t\t\tself._stopFade(id[i]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (self._webAudio && sound._node && !sound._muted) {\n\t\t\t\t\t\t\tsound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n\t\t\t\t\t\t} else if (sound._node && !sound._muted) {\n\t\t\t\t\t\t\tsound._node.volume = vol * Howler.volume();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself._emit('volume', sound._id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsound = id ? self._soundById(id) : self._sounds[0];\n\t\t\t\treturn sound ? sound._volume : 0;\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\r\n   * @param  {Number} from The value to fade from (0.0 to 1.0).\r\n   * @param  {Number} to   The volume to fade to (0.0 to 1.0).\r\n   * @param  {Number} len  Time in milliseconds to fade.\r\n   * @param  {Number} id   The sound id (omit to fade all sounds).\r\n   * @return {Howl}\r\n   */\n\t\tfade: function fade(from, to, len, id) {\n\t\t\tvar self = this;\n\n\t\t\t// If the sound hasn't loaded, add it to the load queue to fade when capable.\n\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'fade',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.fade(from, to, len, id);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// Make sure the to/from/len values are numbers.\n\t\t\tfrom = parseFloat(from);\n\t\t\tto = parseFloat(to);\n\t\t\tlen = parseFloat(len);\n\n\t\t\t// Set the volume to the start position.\n\t\t\tself.volume(from, id);\n\n\t\t\t// Fade the volume of one or all sounds.\n\t\t\tvar ids = self._getSoundIds(id);\n\t\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t\t// Get the sound.\n\t\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\t\t// Create a linear fade or fall back to timeouts with HTML5 Audio.\n\t\t\t\tif (sound) {\n\t\t\t\t\t// Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n\t\t\t\t\tif (!id) {\n\t\t\t\t\t\tself._stopFade(ids[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If we are using Web Audio, let the native methods do the actual fade.\n\t\t\t\t\tif (self._webAudio && !sound._muted) {\n\t\t\t\t\t\tvar currentTime = Howler.ctx.currentTime;\n\t\t\t\t\t\tvar end = currentTime + len / 1000;\n\t\t\t\t\t\tsound._volume = from;\n\t\t\t\t\t\tsound._node.gain.setValueAtTime(from, currentTime);\n\t\t\t\t\t\tsound._node.gain.linearRampToValueAtTime(to, end);\n\t\t\t\t\t}\n\n\t\t\t\t\tself._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Starts the internal interval to fade a sound.\r\n   * @param  {Object} sound Reference to sound to fade.\r\n   * @param  {Number} from The value to fade from (0.0 to 1.0).\r\n   * @param  {Number} to   The volume to fade to (0.0 to 1.0).\r\n   * @param  {Number} len  Time in milliseconds to fade.\r\n   * @param  {Number} id   The sound id to fade.\r\n   * @param  {Boolean} isGroup   If true, set the volume on the group.\r\n   */\n\t\t_startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n\t\t\tvar self = this;\n\t\t\tvar vol = from;\n\t\t\tvar diff = to - from;\n\t\t\tvar steps = Math.abs(diff / 0.01);\n\t\t\tvar stepLen = Math.max(4, steps > 0 ? len / steps : len);\n\t\t\tvar lastTick = Date.now();\n\n\t\t\t// Store the value being faded to.\n\t\t\tsound._fadeTo = to;\n\n\t\t\t// Update the volume value on each interval tick.\n\t\t\tsound._interval = setInterval(function () {\n\t\t\t\t// Update the volume based on the time since the last tick.\n\t\t\t\tvar tick = (Date.now() - lastTick) / len;\n\t\t\t\tlastTick = Date.now();\n\t\t\t\tvol += diff * tick;\n\n\t\t\t\t// Make sure the volume is in the right bounds.\n\t\t\t\tvol = Math.max(0, vol);\n\t\t\t\tvol = Math.min(1, vol);\n\n\t\t\t\t// Round to within 2 decimal points.\n\t\t\t\tvol = Math.round(vol * 100) / 100;\n\n\t\t\t\t// Change the volume.\n\t\t\t\tif (self._webAudio) {\n\t\t\t\t\tsound._volume = vol;\n\t\t\t\t} else {\n\t\t\t\t\tself.volume(vol, sound._id, true);\n\t\t\t\t}\n\n\t\t\t\t// Set the group's volume.\n\t\t\t\tif (isGroup) {\n\t\t\t\t\tself._volume = vol;\n\t\t\t\t}\n\n\t\t\t\t// When the fade is complete, stop it and fire event.\n\t\t\t\tif (to < from && vol <= to || to > from && vol >= to) {\n\t\t\t\t\tclearInterval(sound._interval);\n\t\t\t\t\tsound._interval = null;\n\t\t\t\t\tsound._fadeTo = null;\n\t\t\t\t\tself.volume(to, sound._id);\n\t\t\t\t\tself._emit('fade', sound._id);\n\t\t\t\t}\n\t\t\t}, stepLen);\n\t\t},\n\n\t\t/**\r\n   * Internal method that stops the currently playing fade when\r\n   * a new fade starts, volume is changed or the sound is stopped.\r\n   * @param  {Number} id The sound id.\r\n   * @return {Howl}\r\n   */\n\t\t_stopFade: function _stopFade(id) {\n\t\t\tvar self = this;\n\t\t\tvar sound = self._soundById(id);\n\n\t\t\tif (sound && sound._interval) {\n\t\t\t\tif (self._webAudio) {\n\t\t\t\t\tsound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n\t\t\t\t}\n\n\t\t\t\tclearInterval(sound._interval);\n\t\t\t\tsound._interval = null;\n\t\t\t\tself.volume(sound._fadeTo, id);\n\t\t\t\tsound._fadeTo = null;\n\t\t\t\tself._emit('fade', id);\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\r\n   *   loop() -> Returns the group's loop value.\r\n   *   loop(id) -> Returns the sound id's loop value.\r\n   *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\r\n   *   loop(loop, id) -> Sets the loop value of passed sound id.\r\n   * @return {Howl/Boolean} Returns self or current loop value.\r\n   */\n\t\tloop: function loop() {\n\t\t\tvar self = this;\n\t\t\tvar args = arguments;\n\t\t\tvar loop, id, sound;\n\n\t\t\t// Determine the values for loop and id.\n\t\t\tif (args.length === 0) {\n\t\t\t\t// Return the grou's loop value.\n\t\t\t\treturn self._loop;\n\t\t\t} else if (args.length === 1) {\n\t\t\t\tif (typeof args[0] === 'boolean') {\n\t\t\t\t\tloop = args[0];\n\t\t\t\t\tself._loop = loop;\n\t\t\t\t} else {\n\t\t\t\t\t// Return this sound's loop value.\n\t\t\t\t\tsound = self._soundById(parseInt(args[0], 10));\n\t\t\t\t\treturn sound ? sound._loop : false;\n\t\t\t\t}\n\t\t\t} else if (args.length === 2) {\n\t\t\t\tloop = args[0];\n\t\t\t\tid = parseInt(args[1], 10);\n\t\t\t}\n\n\t\t\t// If no id is passed, get all ID's to be looped.\n\t\t\tvar ids = self._getSoundIds(id);\n\t\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t\tsound = self._soundById(ids[i]);\n\n\t\t\t\tif (sound) {\n\t\t\t\t\tsound._loop = loop;\n\t\t\t\t\tif (self._webAudio && sound._node && sound._node.bufferSource) {\n\t\t\t\t\t\tsound._node.bufferSource.loop = loop;\n\t\t\t\t\t\tif (loop) {\n\t\t\t\t\t\t\tsound._node.bufferSource.loopStart = sound._start || 0;\n\t\t\t\t\t\t\tsound._node.bufferSource.loopEnd = sound._stop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\r\n   *   rate() -> Returns the first sound node's current playback rate.\r\n   *   rate(id) -> Returns the sound id's current playback rate.\r\n   *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\r\n   *   rate(rate, id) -> Sets the playback rate of passed sound id.\r\n   * @return {Howl/Number} Returns self or the current playback rate.\r\n   */\n\t\trate: function rate() {\n\t\t\tvar self = this;\n\t\t\tvar args = arguments;\n\t\t\tvar rate, id;\n\n\t\t\t// Determine the values based on arguments.\n\t\t\tif (args.length === 0) {\n\t\t\t\t// We will simply return the current rate of the first node.\n\t\t\t\tid = self._sounds[0]._id;\n\t\t\t} else if (args.length === 1) {\n\t\t\t\t// First check if this is an ID, and if not, assume it is a new rate value.\n\t\t\t\tvar ids = self._getSoundIds();\n\t\t\t\tvar index = ids.indexOf(args[0]);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tid = parseInt(args[0], 10);\n\t\t\t\t} else {\n\t\t\t\t\trate = parseFloat(args[0]);\n\t\t\t\t}\n\t\t\t} else if (args.length === 2) {\n\t\t\t\trate = parseFloat(args[0]);\n\t\t\t\tid = parseInt(args[1], 10);\n\t\t\t}\n\n\t\t\t// Update the playback rate or return the current value.\n\t\t\tvar sound;\n\t\t\tif (typeof rate === 'number') {\n\t\t\t\t// If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n\t\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\t\tself._queue.push({\n\t\t\t\t\t\tevent: 'rate',\n\t\t\t\t\t\taction: function action() {\n\t\t\t\t\t\t\tself.rate.apply(self, args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn self;\n\t\t\t\t}\n\n\t\t\t\t// Set the group rate.\n\t\t\t\tif (typeof id === 'undefined') {\n\t\t\t\t\tself._rate = rate;\n\t\t\t\t}\n\n\t\t\t\t// Update one or all volumes.\n\t\t\t\tid = self._getSoundIds(id);\n\t\t\t\tfor (var i = 0; i < id.length; i++) {\n\t\t\t\t\t// Get the sound.\n\t\t\t\t\tsound = self._soundById(id[i]);\n\n\t\t\t\t\tif (sound) {\n\t\t\t\t\t\t// Keep track of our position when the rate changed and update the playback\n\t\t\t\t\t\t// start position so we can properly adjust the seek position for time elapsed.\n\t\t\t\t\t\tif (self.playing(id[i])) {\n\t\t\t\t\t\t\tsound._rateSeek = self.seek(id[i]);\n\t\t\t\t\t\t\tsound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsound._rate = rate;\n\n\t\t\t\t\t\t// Change the playback rate.\n\t\t\t\t\t\tif (self._webAudio && sound._node && sound._node.bufferSource) {\n\t\t\t\t\t\t\tsound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n\t\t\t\t\t\t} else if (sound._node) {\n\t\t\t\t\t\t\tsound._node.playbackRate = rate;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Reset the timers.\n\t\t\t\t\t\tvar seek = self.seek(id[i]);\n\t\t\t\t\t\tvar duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n\t\t\t\t\t\tvar timeout = duration * 1000 / Math.abs(sound._rate);\n\n\t\t\t\t\t\t// Start a new end timer if sound is already playing.\n\t\t\t\t\t\tif (self._endTimers[id[i]] || !sound._paused) {\n\t\t\t\t\t\t\tself._clearTimer(id[i]);\n\t\t\t\t\t\t\tself._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself._emit('rate', sound._id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsound = self._soundById(id);\n\t\t\t\treturn sound ? sound._rate : self._rate;\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\r\n   *   seek() -> Returns the first sound node's current seek position.\r\n   *   seek(id) -> Returns the sound id's current seek position.\r\n   *   seek(seek) -> Sets the seek position of the first sound node.\r\n   *   seek(seek, id) -> Sets the seek position of passed sound id.\r\n   * @return {Howl/Number} Returns self or the current seek position.\r\n   */\n\t\tseek: function seek() {\n\t\t\tvar self = this;\n\t\t\tvar args = arguments;\n\t\t\tvar seek, id;\n\n\t\t\t// Determine the values based on arguments.\n\t\t\tif (args.length === 0) {\n\t\t\t\t// We will simply return the current position of the first node.\n\t\t\t\tid = self._sounds[0]._id;\n\t\t\t} else if (args.length === 1) {\n\t\t\t\t// First check if this is an ID, and if not, assume it is a new seek position.\n\t\t\t\tvar ids = self._getSoundIds();\n\t\t\t\tvar index = ids.indexOf(args[0]);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tid = parseInt(args[0], 10);\n\t\t\t\t} else if (self._sounds.length) {\n\t\t\t\t\tid = self._sounds[0]._id;\n\t\t\t\t\tseek = parseFloat(args[0]);\n\t\t\t\t}\n\t\t\t} else if (args.length === 2) {\n\t\t\t\tseek = parseFloat(args[0]);\n\t\t\t\tid = parseInt(args[1], 10);\n\t\t\t}\n\n\t\t\t// If there is no ID, bail out.\n\t\t\tif (typeof id === 'undefined') {\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// If the sound hasn't loaded, add it to the load queue to seek when capable.\n\t\t\tif (self._state !== 'loaded' || self._playLock) {\n\t\t\t\tself._queue.push({\n\t\t\t\t\tevent: 'seek',\n\t\t\t\t\taction: function action() {\n\t\t\t\t\t\tself.seek.apply(self, args);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// Get the sound.\n\t\t\tvar sound = self._soundById(id);\n\n\t\t\tif (sound) {\n\t\t\t\tif (typeof seek === 'number' && seek >= 0) {\n\t\t\t\t\t// Pause the sound and update position for restarting playback.\n\t\t\t\t\tvar playing = self.playing(id);\n\t\t\t\t\tif (playing) {\n\t\t\t\t\t\tself.pause(id, true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Move the position of the track and cancel timer.\n\t\t\t\t\tsound._seek = seek;\n\t\t\t\t\tsound._ended = false;\n\t\t\t\t\tself._clearTimer(id);\n\n\t\t\t\t\t// Update the seek position for HTML5 Audio.\n\t\t\t\t\tif (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n\t\t\t\t\t\tsound._node.currentTime = seek;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Seek and emit when ready.\n\t\t\t\t\tvar seekAndEmit = function seekAndEmit() {\n\t\t\t\t\t\tself._emit('seek', id);\n\n\t\t\t\t\t\t// Restart the playback if the sound was playing.\n\t\t\t\t\t\tif (playing) {\n\t\t\t\t\t\t\tself.play(id, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Wait for the play lock to be unset before emitting (HTML5 Audio).\n\t\t\t\t\tif (playing && !self._webAudio) {\n\t\t\t\t\t\tvar emitSeek = function emitSeek() {\n\t\t\t\t\t\t\tif (!self._playLock) {\n\t\t\t\t\t\t\t\tseekAndEmit();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetTimeout(emitSeek, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsetTimeout(emitSeek, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseekAndEmit();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (self._webAudio) {\n\t\t\t\t\t\tvar realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n\t\t\t\t\t\tvar rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n\t\t\t\t\t\treturn sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn sound._node.currentTime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\r\n   * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\r\n   * @return {Boolean} True if playing and false if not.\r\n   */\n\t\tplaying: function playing(id) {\n\t\t\tvar self = this;\n\n\t\t\t// Check the passed sound ID (if any).\n\t\t\tif (typeof id === 'number') {\n\t\t\t\tvar sound = self._soundById(id);\n\t\t\t\treturn sound ? !sound._paused : false;\n\t\t\t}\n\n\t\t\t// Otherwise, loop through all sounds and check if any are playing.\n\t\t\tfor (var i = 0; i < self._sounds.length; i++) {\n\t\t\t\tif (!self._sounds[i]._paused) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\r\n   * Get the duration of this sound. Passing a sound id will return the sprite duration.\r\n   * @param  {Number} id The sound id to check. If none is passed, return full source duration.\r\n   * @return {Number} Audio duration in seconds.\r\n   */\n\t\tduration: function duration(id) {\n\t\t\tvar self = this;\n\t\t\tvar duration = self._duration;\n\n\t\t\t// If we pass an ID, get the sound and return the sprite length.\n\t\t\tvar sound = self._soundById(id);\n\t\t\tif (sound) {\n\t\t\t\tduration = self._sprite[sound._sprite][1] / 1000;\n\t\t\t}\n\n\t\t\treturn duration;\n\t\t},\n\n\t\t/**\r\n   * Returns the current loaded state of this Howl.\r\n   * @return {String} 'unloaded', 'loading', 'loaded'\r\n   */\n\t\tstate: function state() {\n\t\t\treturn this._state;\n\t\t},\n\n\t\t/**\r\n   * Unload and destroy the current Howl object.\r\n   * This will immediately stop all sound instances attached to this group.\r\n   */\n\t\tunload: function unload() {\n\t\t\tvar self = this;\n\n\t\t\t// Stop playing any active sounds.\n\t\t\tvar sounds = self._sounds;\n\t\t\tfor (var i = 0; i < sounds.length; i++) {\n\t\t\t\t// Stop the sound if it is currently playing.\n\t\t\t\tif (!sounds[i]._paused) {\n\t\t\t\t\tself.stop(sounds[i]._id);\n\t\t\t\t}\n\n\t\t\t\t// Remove the source or disconnect.\n\t\t\t\tif (!self._webAudio) {\n\t\t\t\t\t// Set the source to 0-second silence to stop any downloading (except in IE).\n\t\t\t\t\tvar checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\t\t\t\t\tif (!checkIE) {\n\t\t\t\t\t\tsounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove any event listeners.\n\t\t\t\t\tsounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\t\t\t\t\tsounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n\t\t\t\t\t// Release the Audio object back to the pool.\n\t\t\t\t\tHowler._releaseHtml5Audio(sounds[i]._node);\n\t\t\t\t}\n\n\t\t\t\t// Empty out all of the nodes.\n\t\t\t\tdelete sounds[i]._node;\n\n\t\t\t\t// Make sure all timers are cleared out.\n\t\t\t\tself._clearTimer(sounds[i]._id);\n\t\t\t}\n\n\t\t\t// Remove the references in the global Howler object.\n\t\t\tvar index = Howler._howls.indexOf(self);\n\t\t\tif (index >= 0) {\n\t\t\t\tHowler._howls.splice(index, 1);\n\t\t\t}\n\n\t\t\t// Delete this sound from the cache (if no other Howl is using it).\n\t\t\tvar remCache = true;\n\t\t\tfor (i = 0; i < Howler._howls.length; i++) {\n\t\t\t\tif (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n\t\t\t\t\tremCache = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cache && remCache) {\n\t\t\t\tdelete cache[self._src];\n\t\t\t}\n\n\t\t\t// Clear global errors.\n\t\t\tHowler.noAudio = false;\n\n\t\t\t// Clear out `self`.\n\t\t\tself._state = 'unloaded';\n\t\t\tself._sounds = [];\n\t\t\tself = null;\n\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\r\n   * Listen to a custom event.\r\n   * @param  {String}   event Event name.\r\n   * @param  {Function} fn    Listener to call.\r\n   * @param  {Number}   id    (optional) Only listen to events for this sound.\r\n   * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\r\n   * @return {Howl}\r\n   */\n\t\ton: function on(event, fn, id, once) {\n\t\t\tvar self = this;\n\t\t\tvar events = self['_on' + event];\n\n\t\t\tif (typeof fn === 'function') {\n\t\t\t\tevents.push(once ? {\n\t\t\t\t\tid: id,\n\t\t\t\t\tfn: fn,\n\t\t\t\t\tonce: once\n\t\t\t\t} : {\n\t\t\t\t\tid: id,\n\t\t\t\t\tfn: fn\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Remove a custom event. Call without parameters to remove all events.\r\n   * @param  {String}   event Event name.\r\n   * @param  {Function} fn    Listener to remove. Leave empty to remove all.\r\n   * @param  {Number}   id    (optional) Only remove events for this sound.\r\n   * @return {Howl}\r\n   */\n\t\toff: function off(event, fn, id) {\n\t\t\tvar self = this;\n\t\t\tvar events = self['_on' + event];\n\t\t\tvar i = 0;\n\n\t\t\t// Allow passing just an event and ID.\n\t\t\tif (typeof fn === 'number') {\n\t\t\t\tid = fn;\n\t\t\t\tfn = null;\n\t\t\t}\n\n\t\t\tif (fn || id) {\n\t\t\t\t// Loop through event store and remove the passed function.\n\t\t\t\tfor (i = 0; i < events.length; i++) {\n\t\t\t\t\tvar isId = id === events[i].id;\n\t\t\t\t\tif (fn === events[i].fn && isId || !fn && isId) {\n\t\t\t\t\t\tevents.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (event) {\n\t\t\t\t// Clear out all events of this type.\n\t\t\t\tself['_on' + event] = [];\n\t\t\t} else {\n\t\t\t\t// Clear out all events of every type.\n\t\t\t\tvar keys = Object.keys(self);\n\t\t\t\tfor (i = 0; i < keys.length; i++) {\n\t\t\t\t\tif (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n\t\t\t\t\t\tself[keys[i]] = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Listen to a custom event and remove it once fired.\r\n   * @param  {String}   event Event name.\r\n   * @param  {Function} fn    Listener to call.\r\n   * @param  {Number}   id    (optional) Only listen to events for this sound.\r\n   * @return {Howl}\r\n   */\n\t\tonce: function once(event, fn, id) {\n\t\t\tvar self = this;\n\n\t\t\t// Setup the event listener.\n\t\t\tself.on(event, fn, id, 1);\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Emit all events of a specific type and pass the sound id.\r\n   * @param  {String} event Event name.\r\n   * @param  {Number} id    Sound ID.\r\n   * @param  {Number} msg   Message to go with event.\r\n   * @return {Howl}\r\n   */\n\t\t_emit: function _emit(event, id, msg) {\n\t\t\tvar self = this;\n\t\t\tvar events = self['_on' + event];\n\n\t\t\t// Loop through event store and fire all functions.\n\t\t\tfor (var i = events.length - 1; i >= 0; i--) {\n\t\t\t\t// Only fire the listener if the correct ID is used.\n\t\t\t\tif (!events[i].id || events[i].id === id || event === 'load') {\n\t\t\t\t\tsetTimeout(function (fn) {\n\t\t\t\t\t\tfn.call(this, id, msg);\n\t\t\t\t\t}.bind(self, events[i].fn), 0);\n\n\t\t\t\t\t// If this event was setup with `once`, remove it.\n\t\t\t\t\tif (events[i].once) {\n\t\t\t\t\t\tself.off(event, events[i].fn, events[i].id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Pass the event type into load queue so that it can continue stepping.\n\t\t\tself._loadQueue(event);\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Queue of actions initiated before the sound has loaded.\r\n   * These will be called in sequence, with the next only firing\r\n   * after the previous has finished executing (even if async like play).\r\n   * @return {Howl}\r\n   */\n\t\t_loadQueue: function _loadQueue(event) {\n\t\t\tvar self = this;\n\n\t\t\tif (self._queue.length > 0) {\n\t\t\t\tvar task = self._queue[0];\n\n\t\t\t\t// Remove this task if a matching event was passed.\n\t\t\t\tif (task.event === event) {\n\t\t\t\t\tself._queue.shift();\n\t\t\t\t\tself._loadQueue();\n\t\t\t\t}\n\n\t\t\t\t// Run the task if no event type is passed.\n\t\t\t\tif (!event) {\n\t\t\t\t\ttask.action();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Fired when playback ends at the end of the duration.\r\n   * @param  {Sound} sound The sound object to work with.\r\n   * @return {Howl}\r\n   */\n\t\t_ended: function _ended(sound) {\n\t\t\tvar self = this;\n\t\t\tvar sprite = sound._sprite;\n\n\t\t\t// If we are using IE and there was network latency we may be clipping\n\t\t\t// audio before it completes playing. Lets check the node to make sure it\n\t\t\t// believes it has completed, before ending the playback.\n\t\t\tif (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n\t\t\t\tsetTimeout(self._ended.bind(self, sound), 100);\n\t\t\t\treturn self;\n\t\t\t}\n\n\t\t\t// Should this sound loop?\n\t\t\tvar loop = !!(sound._loop || self._sprite[sprite][2]);\n\n\t\t\t// Fire the ended event.\n\t\t\tself._emit('end', sound._id);\n\n\t\t\t// Restart the playback for HTML5 Audio loop.\n\t\t\tif (!self._webAudio && loop) {\n\t\t\t\tself.stop(sound._id, true).play(sound._id);\n\t\t\t}\n\n\t\t\t// Restart this timer if on a Web Audio loop.\n\t\t\tif (self._webAudio && loop) {\n\t\t\t\tself._emit('play', sound._id);\n\t\t\t\tsound._seek = sound._start || 0;\n\t\t\t\tsound._rateSeek = 0;\n\t\t\t\tsound._playStart = Howler.ctx.currentTime;\n\n\t\t\t\tvar timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n\t\t\t\tself._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n\t\t\t}\n\n\t\t\t// Mark the node as paused.\n\t\t\tif (self._webAudio && !loop) {\n\t\t\t\tsound._paused = true;\n\t\t\t\tsound._ended = true;\n\t\t\t\tsound._seek = sound._start || 0;\n\t\t\t\tsound._rateSeek = 0;\n\t\t\t\tself._clearTimer(sound._id);\n\n\t\t\t\t// Clean up the buffer source.\n\t\t\t\tself._cleanBuffer(sound._node);\n\n\t\t\t\t// Attempt to auto-suspend AudioContext if no sounds are still playing.\n\t\t\t\tHowler._autoSuspend();\n\t\t\t}\n\n\t\t\t// When using a sprite, end the track.\n\t\t\tif (!self._webAudio && !loop) {\n\t\t\t\tself.stop(sound._id, true);\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Clear the end timer for a sound playback.\r\n   * @param  {Number} id The sound ID.\r\n   * @return {Howl}\r\n   */\n\t\t_clearTimer: function _clearTimer(id) {\n\t\t\tvar self = this;\n\n\t\t\tif (self._endTimers[id]) {\n\t\t\t\t// Clear the timeout or remove the ended listener.\n\t\t\t\tif (typeof self._endTimers[id] !== 'function') {\n\t\t\t\t\tclearTimeout(self._endTimers[id]);\n\t\t\t\t} else {\n\t\t\t\t\tvar sound = self._soundById(id);\n\t\t\t\t\tif (sound && sound._node) {\n\t\t\t\t\t\tsound._node.removeEventListener('ended', self._endTimers[id], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdelete self._endTimers[id];\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Return the sound identified by this ID, or return null.\r\n   * @param  {Number} id Sound ID\r\n   * @return {Object}    Sound object or null.\r\n   */\n\t\t_soundById: function _soundById(id) {\n\t\t\tvar self = this;\n\n\t\t\t// Loop through all sounds and find the one with this ID.\n\t\t\tfor (var i = 0; i < self._sounds.length; i++) {\n\t\t\t\tif (id === self._sounds[i]._id) {\n\t\t\t\t\treturn self._sounds[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\n\t\t/**\r\n   * Return an inactive sound from the pool or create a new one.\r\n   * @return {Sound} Sound playback object.\r\n   */\n\t\t_inactiveSound: function _inactiveSound() {\n\t\t\tvar self = this;\n\n\t\t\tself._drain();\n\n\t\t\t// Find the first inactive node to recycle.\n\t\t\tfor (var i = 0; i < self._sounds.length; i++) {\n\t\t\t\tif (self._sounds[i]._ended) {\n\t\t\t\t\treturn self._sounds[i].reset();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If no inactive node was found, create a new one.\n\t\t\treturn new Sound(self);\n\t\t},\n\n\t\t/**\r\n   * Drain excess inactive sounds from the pool.\r\n   */\n\t\t_drain: function _drain() {\n\t\t\tvar self = this;\n\t\t\tvar limit = self._pool;\n\t\t\tvar cnt = 0;\n\t\t\tvar i = 0;\n\n\t\t\t// If there are less sounds than the max pool size, we are done.\n\t\t\tif (self._sounds.length < limit) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Count the number of inactive sounds.\n\t\t\tfor (i = 0; i < self._sounds.length; i++) {\n\t\t\t\tif (self._sounds[i]._ended) {\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove excess inactive sounds, going in reverse order.\n\t\t\tfor (i = self._sounds.length - 1; i >= 0; i--) {\n\t\t\t\tif (cnt <= limit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (self._sounds[i]._ended) {\n\t\t\t\t\t// Disconnect the audio source when using Web Audio.\n\t\t\t\t\tif (self._webAudio && self._sounds[i]._node) {\n\t\t\t\t\t\tself._sounds[i]._node.disconnect(0);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Remove sounds until we have the pool size.\n\t\t\t\t\tself._sounds.splice(i, 1);\n\t\t\t\t\tcnt--;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\r\n   * Get all ID's from the sounds pool.\r\n   * @param  {Number} id Only return one ID if one is passed.\r\n   * @return {Array}    Array of IDs.\r\n   */\n\t\t_getSoundIds: function _getSoundIds(id) {\n\t\t\tvar self = this;\n\n\t\t\tif (typeof id === 'undefined') {\n\t\t\t\tvar ids = [];\n\t\t\t\tfor (var i = 0; i < self._sounds.length; i++) {\n\t\t\t\t\tids.push(self._sounds[i]._id);\n\t\t\t\t}\n\n\t\t\t\treturn ids;\n\t\t\t} else {\n\t\t\t\treturn [id];\n\t\t\t}\n\t\t},\n\n\t\t/**\r\n   * Load the sound back into the buffer source.\r\n   * @param  {Sound} sound The sound object to work with.\r\n   * @return {Howl}\r\n   */\n\t\t_refreshBuffer: function _refreshBuffer(sound) {\n\t\t\tvar self = this;\n\n\t\t\t// Setup the buffer source for playback.\n\t\t\tsound._node.bufferSource = Howler.ctx.createBufferSource();\n\t\t\tsound._node.bufferSource.buffer = cache[self._src];\n\n\t\t\t// Connect to the correct node.\n\t\t\tif (sound._panner) {\n\t\t\t\tsound._node.bufferSource.connect(sound._panner);\n\t\t\t} else {\n\t\t\t\tsound._node.bufferSource.connect(sound._node);\n\t\t\t}\n\n\t\t\t// Setup looping and playback rate.\n\t\t\tsound._node.bufferSource.loop = sound._loop;\n\t\t\tif (sound._loop) {\n\t\t\t\tsound._node.bufferSource.loopStart = sound._start || 0;\n\t\t\t\tsound._node.bufferSource.loopEnd = sound._stop || 0;\n\t\t\t}\n\t\t\tsound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Prevent memory leaks by cleaning up the buffer source after playback.\r\n   * @param  {Object} node Sound's audio node containing the buffer source.\r\n   * @return {Howl}\r\n   */\n\t\t_cleanBuffer: function _cleanBuffer(node) {\n\t\t\tvar self = this;\n\t\t\tvar isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n\t\t\tif (Howler._scratchBuffer && node.bufferSource) {\n\t\t\t\tnode.bufferSource.onended = null;\n\t\t\t\tnode.bufferSource.disconnect(0);\n\t\t\t\tif (isIOS) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnode.bufferSource.buffer = Howler._scratchBuffer;\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t}\n\t\t\tnode.bufferSource = null;\n\n\t\t\treturn self;\n\t\t}\n\t};\n\n\t/** Single Sound Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Setup the sound object, which each node attached to a Howl group is contained in.\r\n  * @param {Object} howl The Howl parent group.\r\n  */\n\tvar Sound = function Sound(howl) {\n\t\tthis._parent = howl;\n\t\tthis.init();\n\t};\n\tSound.prototype = {\n\t\t/**\r\n   * Initialize a new Sound object.\r\n   * @return {Sound}\r\n   */\n\t\tinit: function init() {\n\t\t\tvar self = this;\n\t\t\tvar parent = self._parent;\n\n\t\t\t// Setup the default parameters.\n\t\t\tself._muted = parent._muted;\n\t\t\tself._loop = parent._loop;\n\t\t\tself._volume = parent._volume;\n\t\t\tself._rate = parent._rate;\n\t\t\tself._seek = 0;\n\t\t\tself._paused = true;\n\t\t\tself._ended = true;\n\t\t\tself._sprite = '__default';\n\n\t\t\t// Generate a unique ID for this sound.\n\t\t\tself._id = ++Howler._counter;\n\n\t\t\t// Add itself to the parent's pool.\n\t\t\tparent._sounds.push(self);\n\n\t\t\t// Create the new node.\n\t\t\tself.create();\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\r\n   * @return {Sound}\r\n   */\n\t\tcreate: function create() {\n\t\t\tvar self = this;\n\t\t\tvar parent = self._parent;\n\t\t\tvar volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n\t\t\tif (parent._webAudio) {\n\t\t\t\t// Create the gain node for controlling volume (the source will connect to this).\n\t\t\t\tself._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\t\t\t\tself._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\t\t\t\tself._node.paused = true;\n\t\t\t\tself._node.connect(Howler.masterGain);\n\t\t\t} else {\n\t\t\t\t// Get an unlocked Audio object from the pool.\n\t\t\t\tself._node = Howler._obtainHtml5Audio();\n\n\t\t\t\t// Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\t\t\t\tself._errorFn = self._errorListener.bind(self);\n\t\t\t\tself._node.addEventListener('error', self._errorFn, false);\n\n\t\t\t\t// Listen for 'canplaythrough' event to let us know the sound is ready.\n\t\t\t\tself._loadFn = self._loadListener.bind(self);\n\t\t\t\tself._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n\t\t\t\t// Setup the new audio node.\n\t\t\t\tself._node.src = parent._src;\n\t\t\t\tself._node.preload = 'auto';\n\t\t\t\tself._node.volume = volume * Howler.volume();\n\n\t\t\t\t// Begin loading the source.\n\t\t\t\tself._node.load();\n\t\t\t}\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * Reset the parameters of this sound to the original state (for recycle).\r\n   * @return {Sound}\r\n   */\n\t\treset: function reset() {\n\t\t\tvar self = this;\n\t\t\tvar parent = self._parent;\n\n\t\t\t// Reset all of the parameters of this sound.\n\t\t\tself._muted = parent._muted;\n\t\t\tself._loop = parent._loop;\n\t\t\tself._volume = parent._volume;\n\t\t\tself._rate = parent._rate;\n\t\t\tself._seek = 0;\n\t\t\tself._rateSeek = 0;\n\t\t\tself._paused = true;\n\t\t\tself._ended = true;\n\t\t\tself._sprite = '__default';\n\n\t\t\t// Generate a new ID so that it isn't confused with the previous sound.\n\t\t\tself._id = ++Howler._counter;\n\n\t\t\treturn self;\n\t\t},\n\n\t\t/**\r\n   * HTML5 Audio error listener callback.\r\n   */\n\t\t_errorListener: function _errorListener() {\n\t\t\tvar self = this;\n\n\t\t\t// Fire an error event and pass back the code.\n\t\t\tself._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n\t\t\t// Clear the event listener.\n\t\t\tself._node.removeEventListener('error', self._errorFn, false);\n\t\t},\n\n\t\t/**\r\n   * HTML5 Audio canplaythrough listener callback.\r\n   */\n\t\t_loadListener: function _loadListener() {\n\t\t\tvar self = this;\n\t\t\tvar parent = self._parent;\n\n\t\t\t// Round up the duration to account for the lower precision in HTML5 Audio.\n\t\t\tparent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n\t\t\t// Setup a sprite if none is defined.\n\t\t\tif (Object.keys(parent._sprite).length === 0) {\n\t\t\t\tparent._sprite = {\n\t\t\t\t\t__default: [0, parent._duration * 1000]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (parent._state !== 'loaded') {\n\t\t\t\tparent._state = 'loaded';\n\t\t\t\tparent._emit('load');\n\t\t\t\tparent._loadQueue();\n\t\t\t}\n\n\t\t\t// Clear the event listener.\n\t\t\tself._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n\t\t}\n\t};\n\n\t/** Helper Methods **/\n\t/***************************************************************************/\n\n\tvar cache = {};\n\n\t/**\r\n  * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\r\n  * @param  {Howl} self\r\n  */\n\tvar loadBuffer = function loadBuffer(self) {\n\t\tvar url = self._src;\n\n\t\t// Check if the buffer has already been cached and use it instead.\n\t\tif (cache[url]) {\n\t\t\t// Set the duration from the cache.\n\t\t\tself._duration = cache[url].duration;\n\n\t\t\t// Load the sound into this Howl.\n\t\t\tloadSound(self);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (/^data:[^;]+;base64,/.test(url)) {\n\t\t\t// Decode the base64 data URI without XHR, since some browsers don't support it.\n\t\t\tvar data = atob(url.split(',')[1]);\n\t\t\tvar dataView = new Uint8Array(data.length);\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tdataView[i] = data.charCodeAt(i);\n\t\t\t}\n\n\t\t\tdecodeAudioData(dataView.buffer, self);\n\t\t} else {\n\t\t\t// Load the buffer from the URL.\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', url, true);\n\t\t\txhr.withCredentials = self._xhrWithCredentials;\n\t\t\txhr.responseType = 'arraybuffer';\n\t\t\txhr.onload = function () {\n\t\t\t\t// Make sure we get a successful response back.\n\t\t\t\tvar code = (xhr.status + '')[0];\n\t\t\t\tif (code !== '0' && code !== '2' && code !== '3') {\n\t\t\t\t\tself._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdecodeAudioData(xhr.response, self);\n\t\t\t};\n\t\t\txhr.onerror = function () {\n\t\t\t\t// If there is an error, switch to HTML5 Audio.\n\t\t\t\tif (self._webAudio) {\n\t\t\t\t\tself._html5 = true;\n\t\t\t\t\tself._webAudio = false;\n\t\t\t\t\tself._sounds = [];\n\t\t\t\t\tdelete cache[url];\n\t\t\t\t\tself.load();\n\t\t\t\t}\n\t\t\t};\n\t\t\tsafeXhrSend(xhr);\n\t\t}\n\t};\n\n\t/**\r\n  * Send the XHR request wrapped in a try/catch.\r\n  * @param  {Object} xhr XHR to send.\r\n  */\n\tvar safeXhrSend = function safeXhrSend(xhr) {\n\t\ttry {\n\t\t\txhr.send();\n\t\t} catch (e) {\n\t\t\txhr.onerror();\n\t\t}\n\t};\n\n\t/**\r\n  * Decode audio data from an array buffer.\r\n  * @param  {ArrayBuffer} arraybuffer The audio data.\r\n  * @param  {Howl}        self\r\n  */\n\tvar decodeAudioData = function decodeAudioData(arraybuffer, self) {\n\t\t// Fire a load error if something broke.\n\t\tvar error = function error() {\n\t\t\tself._emit('loaderror', null, 'Decoding audio data failed.');\n\t\t};\n\n\t\t// Load the sound on success.\n\t\tvar success = function success(buffer) {\n\t\t\tif (buffer && self._sounds.length > 0) {\n\t\t\t\tcache[self._src] = buffer;\n\t\t\t\tloadSound(self, buffer);\n\t\t\t} else {\n\t\t\t\terror();\n\t\t\t}\n\t\t};\n\n\t\t// Decode the buffer into an audio source.\n\t\tif (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n\t\t\tHowler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n\t\t} else {\n\t\t\tHowler.ctx.decodeAudioData(arraybuffer, success, error);\n\t\t}\n\t};\n\n\t/**\r\n  * Sound is now loaded, so finish setting everything up and fire the loaded event.\r\n  * @param  {Howl} self\r\n  * @param  {Object} buffer The decoded buffer sound source.\r\n  */\n\tvar loadSound = function loadSound(self, buffer) {\n\t\t// Set the duration.\n\t\tif (buffer && !self._duration) {\n\t\t\tself._duration = buffer.duration;\n\t\t}\n\n\t\t// Setup a sprite if none is defined.\n\t\tif (Object.keys(self._sprite).length === 0) {\n\t\t\tself._sprite = {\n\t\t\t\t__default: [0, self._duration * 1000]\n\t\t\t};\n\t\t}\n\n\t\t// Fire the loaded event.\n\t\tif (self._state !== 'loaded') {\n\t\t\tself._state = 'loaded';\n\t\t\tself._emit('load');\n\t\t\tself._loadQueue();\n\t\t}\n\t};\n\n\t/**\r\n  * Setup the audio context when available, or switch to HTML5 Audio mode.\r\n  */\n\tvar setupAudioContext = function setupAudioContext() {\n\t\t// If we have already detected that Web Audio isn't supported, don't run this step again.\n\t\tif (!Howler.usingWebAudio) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if we are using Web Audio and setup the AudioContext if we are.\n\t\ttry {\n\t\t\tif (typeof AudioContext !== 'undefined') {\n\t\t\t\tHowler.ctx = new AudioContext();\n\t\t\t} else if (typeof webkitAudioContext !== 'undefined') {\n\t\t\t\tHowler.ctx = new webkitAudioContext();\n\t\t\t} else {\n\t\t\t\tHowler.usingWebAudio = false;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tHowler.usingWebAudio = false;\n\t\t}\n\n\t\t// If the audio context creation still failed, set using web audio to false.\n\t\tif (!Howler.ctx) {\n\t\t\tHowler.usingWebAudio = false;\n\t\t}\n\n\t\t// Check if a webview is being used on iOS8 or earlier (rather than the browser).\n\t\t// If it is, disable Web Audio as it causes crashing.\n\t\tvar iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\t\tvar appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\t\tvar version = appVersion ? parseInt(appVersion[1], 10) : null;\n\t\tif (iOS && version && version < 9) {\n\t\t\tvar safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\t\t\tif (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n\t\t\t\tHowler.usingWebAudio = false;\n\t\t\t}\n\t\t}\n\n\t\t// Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\t\tif (Howler.usingWebAudio) {\n\t\t\tHowler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\t\t\tHowler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);\n\t\t\tHowler.masterGain.connect(Howler.ctx.destination);\n\t\t}\n\n\t\t// Re-run the setup on Howler.\n\t\tHowler._setup();\n\t};\n\n\t// Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn {\n\t\t\t\tHowler: Howler,\n\t\t\t\tHowl: Howl\n\t\t\t};\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\n\t// Add support for CommonJS libraries such as browserify.\n\tif (true) {\n\t\texports.Howler = Howler;\n\t\texports.Howl = Howl;\n\t}\n\n\t// Define globally in case AMD is not available or unused.\n\tif (typeof window !== 'undefined') {\n\t\twindow.HowlerGlobal = HowlerGlobal;\n\t\twindow.Howler = Howler;\n\t\twindow.Howl = Howl;\n\t\twindow.Sound = Sound;\n\t} else if (typeof global !== 'undefined') {\n\t\t// Add to global in Node.js (for testing, etc).\n\t\tglobal.HowlerGlobal = HowlerGlobal;\n\t\tglobal.Howler = Howler;\n\t\tglobal.Howl = Howl;\n\t\tglobal.Sound = Sound;\n\t}\n})();\n\n/*!\r\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\r\n *  \r\n *  howler.js v2.1.1\r\n *  howlerjs.com\r\n *\r\n *  (c) 2013-2018, James Simpson of GoldFire Studios\r\n *  goldfirestudios.com\r\n *\r\n *  MIT License\r\n */\n\n(function () {\n\n\t'use strict';\n\n\t// Setup default properties.\n\n\tHowlerGlobal.prototype._pos = [0, 0, 0];\n\tHowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n\t/** Global Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Helper method to update the stereo panning position of all current Howls.\r\n  * Future Howls will not use this value unless explicitly set.\r\n  * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\r\n  * @return {Howler/Number}     Self or current stereo panning value.\r\n  */\n\tHowlerGlobal.prototype.stereo = function (pan) {\n\t\tvar self = this;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self.ctx || !self.ctx.listener) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// Loop through all Howls and update their stereo panning.\n\t\tfor (var i = self._howls.length - 1; i >= 0; i--) {\n\t\t\tself._howls[i].stereo(pan);\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/**\r\n  * Get/set the position of the listener in 3D cartesian space. Sounds using\r\n  * 3D position will be relative to the listener's position.\r\n  * @param  {Number} x The x-position of the listener.\r\n  * @param  {Number} y The y-position of the listener.\r\n  * @param  {Number} z The z-position of the listener.\r\n  * @return {Howler/Array}   Self or current listener position.\r\n  */\n\tHowlerGlobal.prototype.pos = function (x, y, z) {\n\t\tvar self = this;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self.ctx || !self.ctx.listener) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// Set the defaults for optional 'y' & 'z'.\n\t\ty = typeof y !== 'number' ? self._pos[1] : y;\n\t\tz = typeof z !== 'number' ? self._pos[2] : z;\n\n\t\tif (typeof x === 'number') {\n\t\t\tself._pos = [x, y, z];\n\n\t\t\tif (typeof self.ctx.listener.positionX !== 'undefined') {\n\t\t\t\tself.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n\t\t\t} else {\n\t\t\t\tself.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn self._pos;\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/**\r\n  * Get/set the direction the listener is pointing in the 3D cartesian space.\r\n  * A front and up vector must be provided. The front is the direction the\r\n  * face of the listener is pointing, and up is the direction the top of the\r\n  * listener is pointing. Thus, these values are expected to be at right angles\r\n  * from each other.\r\n  * @param  {Number} x   The x-orientation of the listener.\r\n  * @param  {Number} y   The y-orientation of the listener.\r\n  * @param  {Number} z   The z-orientation of the listener.\r\n  * @param  {Number} xUp The x-orientation of the top of the listener.\r\n  * @param  {Number} yUp The y-orientation of the top of the listener.\r\n  * @param  {Number} zUp The z-orientation of the top of the listener.\r\n  * @return {Howler/Array}     Returns self or the current orientation vectors.\r\n  */\n\tHowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n\t\tvar self = this;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self.ctx || !self.ctx.listener) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// Set the defaults for optional 'y' & 'z'.\n\t\tvar or = self._orientation;\n\t\ty = typeof y !== 'number' ? or[1] : y;\n\t\tz = typeof z !== 'number' ? or[2] : z;\n\t\txUp = typeof xUp !== 'number' ? or[3] : xUp;\n\t\tyUp = typeof yUp !== 'number' ? or[4] : yUp;\n\t\tzUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n\t\tif (typeof x === 'number') {\n\t\t\tself._orientation = [x, y, z, xUp, yUp, zUp];\n\n\t\t\tif (typeof self.ctx.listener.forwardX !== 'undefined') {\n\t\t\t\tself.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n\t\t\t\tself.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n\t\t\t} else {\n\t\t\t\tself.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n\t\t\t}\n\t\t} else {\n\t\t\treturn or;\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/** Group Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Add new properties to the core init.\r\n  * @param  {Function} _super Core init method.\r\n  * @return {Howl}\r\n  */\n\tHowl.prototype.init = function (_super) {\n\t\treturn function (o) {\n\t\t\tvar self = this;\n\n\t\t\t// Setup user-defined default properties.\n\t\t\tself._orientation = o.orientation || [1, 0, 0];\n\t\t\tself._stereo = o.stereo || null;\n\t\t\tself._pos = o.pos || null;\n\t\t\tself._pannerAttr = {\n\t\t\t\tconeInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n\t\t\t\tconeOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n\t\t\t\tconeOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n\t\t\t\tdistanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n\t\t\t\tmaxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n\t\t\t\tpanningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n\t\t\t\trefDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n\t\t\t\trolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n\t\t\t};\n\n\t\t\t// Setup event listeners.\n\t\t\tself._onstereo = o.onstereo ? [{\n\t\t\t\tfn: o.onstereo\n\t\t\t}] : [];\n\t\t\tself._onpos = o.onpos ? [{\n\t\t\t\tfn: o.onpos\n\t\t\t}] : [];\n\t\t\tself._onorientation = o.onorientation ? [{\n\t\t\t\tfn: o.onorientation\n\t\t\t}] : [];\n\n\t\t\t// Complete initilization with howler.js core's init function.\n\t\t\treturn _super.call(this, o);\n\t\t};\n\t}(Howl.prototype.init);\n\n\t/**\r\n  * Get/set the stereo panning of the audio source for this sound or all in the group.\r\n  * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\r\n  * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n  * @return {Howl/Number}    Returns self or the current stereo panning value.\r\n  */\n\tHowl.prototype.stereo = function (pan, id) {\n\t\tvar self = this;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self._webAudio) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\t\tif (self._state !== 'loaded') {\n\t\t\tself._queue.push({\n\t\t\t\tevent: 'stereo',\n\t\t\t\taction: function action() {\n\t\t\t\t\tself.stereo(pan, id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn self;\n\t\t}\n\n\t\t// Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\t\tvar pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo';\n\n\t\t// Setup the group's stereo panning if no ID is passed.\n\t\tif (typeof id === 'undefined') {\n\t\t\t// Return the group's stereo panning if no parameters are passed.\n\t\t\tif (typeof pan === 'number') {\n\t\t\t\tself._stereo = pan;\n\t\t\t\tself._pos = [pan, 0, 0];\n\t\t\t} else {\n\t\t\t\treturn self._stereo;\n\t\t\t}\n\t\t}\n\n\t\t// Change the streo panning of one or all sounds in group.\n\t\tvar ids = self._getSoundIds(id);\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t// Get the sound.\n\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\tif (sound) {\n\t\t\t\tif (typeof pan === 'number') {\n\t\t\t\t\tsound._stereo = pan;\n\t\t\t\t\tsound._pos = [pan, 0, 0];\n\n\t\t\t\t\tif (sound._node) {\n\t\t\t\t\t\t// If we are falling back, make sure the panningModel is equalpower.\n\t\t\t\t\t\tsound._pannerAttr.panningModel = 'equalpower';\n\n\t\t\t\t\t\t// Check if there is a panner setup and create a new one if not.\n\t\t\t\t\t\tif (!sound._panner || !sound._panner.pan) {\n\t\t\t\t\t\t\tsetupPanner(sound, pannerType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (pannerType === 'spatial') {\n\t\t\t\t\t\t\tif (typeof sound._panner.positionX !== 'undefined') {\n\t\t\t\t\t\t\t\tsound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\t\t\t\t\t\t\t\tsound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\t\t\t\t\t\t\t\tsound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsound._panner.setPosition(pan, 0, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tself._emit('stereo', sound._id);\n\t\t\t\t} else {\n\t\t\t\t\treturn sound._stereo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/**\r\n  * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\r\n  * @param  {Number} x  The x-position of the audio source.\r\n  * @param  {Number} y  The y-position of the audio source.\r\n  * @param  {Number} z  The z-position of the audio source.\r\n  * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n  * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\r\n  */\n\tHowl.prototype.pos = function (x, y, z, id) {\n\t\tvar self = this;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self._webAudio) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// If the sound hasn't loaded, add it to the load queue to change position when capable.\n\t\tif (self._state !== 'loaded') {\n\t\t\tself._queue.push({\n\t\t\t\tevent: 'pos',\n\t\t\t\taction: function action() {\n\t\t\t\t\tself.pos(x, y, z, id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn self;\n\t\t}\n\n\t\t// Set the defaults for optional 'y' & 'z'.\n\t\ty = typeof y !== 'number' ? 0 : y;\n\t\tz = typeof z !== 'number' ? -0.5 : z;\n\n\t\t// Setup the group's spatial position if no ID is passed.\n\t\tif (typeof id === 'undefined') {\n\t\t\t// Return the group's spatial position if no parameters are passed.\n\t\t\tif (typeof x === 'number') {\n\t\t\t\tself._pos = [x, y, z];\n\t\t\t} else {\n\t\t\t\treturn self._pos;\n\t\t\t}\n\t\t}\n\n\t\t// Change the spatial position of one or all sounds in group.\n\t\tvar ids = self._getSoundIds(id);\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t// Get the sound.\n\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\tif (sound) {\n\t\t\t\tif (typeof x === 'number') {\n\t\t\t\t\tsound._pos = [x, y, z];\n\n\t\t\t\t\tif (sound._node) {\n\t\t\t\t\t\t// Check if there is a panner setup and create a new one if not.\n\t\t\t\t\t\tif (!sound._panner || sound._panner.pan) {\n\t\t\t\t\t\t\tsetupPanner(sound, 'spatial');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof sound._panner.positionX !== 'undefined') {\n\t\t\t\t\t\t\tsound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\t\t\t\t\t\t\tsound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\t\t\t\t\t\t\tsound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsound._panner.setPosition(x, y, z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tself._emit('pos', sound._id);\n\t\t\t\t} else {\n\t\t\t\t\treturn sound._pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/**\r\n  * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\r\n  * space. Depending on how direction the sound is, based on the `cone` attributes,\r\n  * a sound pointing away from the listener can be quiet or silent.\r\n  * @param  {Number} x  The x-orientation of the source.\r\n  * @param  {Number} y  The y-orientation of the source.\r\n  * @param  {Number} z  The z-orientation of the source.\r\n  * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\r\n  * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\r\n  */\n\tHowl.prototype.orientation = function (x, y, z, id) {\n\t\tvar self = this;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self._webAudio) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\t\tif (self._state !== 'loaded') {\n\t\t\tself._queue.push({\n\t\t\t\tevent: 'orientation',\n\t\t\t\taction: function action() {\n\t\t\t\t\tself.orientation(x, y, z, id);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn self;\n\t\t}\n\n\t\t// Set the defaults for optional 'y' & 'z'.\n\t\ty = typeof y !== 'number' ? self._orientation[1] : y;\n\t\tz = typeof z !== 'number' ? self._orientation[2] : z;\n\n\t\t// Setup the group's spatial orientation if no ID is passed.\n\t\tif (typeof id === 'undefined') {\n\t\t\t// Return the group's spatial orientation if no parameters are passed.\n\t\t\tif (typeof x === 'number') {\n\t\t\t\tself._orientation = [x, y, z];\n\t\t\t} else {\n\t\t\t\treturn self._orientation;\n\t\t\t}\n\t\t}\n\n\t\t// Change the spatial orientation of one or all sounds in group.\n\t\tvar ids = self._getSoundIds(id);\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\t// Get the sound.\n\t\t\tvar sound = self._soundById(ids[i]);\n\n\t\t\tif (sound) {\n\t\t\t\tif (typeof x === 'number') {\n\t\t\t\t\tsound._orientation = [x, y, z];\n\n\t\t\t\t\tif (sound._node) {\n\t\t\t\t\t\t// Check if there is a panner setup and create a new one if not.\n\t\t\t\t\t\tif (!sound._panner) {\n\t\t\t\t\t\t\t// Make sure we have a position to setup the node with.\n\t\t\t\t\t\t\tif (!sound._pos) {\n\t\t\t\t\t\t\t\tsound._pos = self._pos || [0, 0, -0.5];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsetupPanner(sound, 'spatial');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof sound._panner.orientationX !== 'undefined') {\n\t\t\t\t\t\t\tsound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\t\t\t\t\t\t\tsound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\t\t\t\t\t\t\tsound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsound._panner.setOrientation(x, y, z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tself._emit('orientation', sound._id);\n\t\t\t\t} else {\n\t\t\t\t\treturn sound._orientation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/**\r\n  * Get/set the panner node's attributes for a sound or group of sounds.\r\n  * This method can optionall take 0, 1 or 2 arguments.\r\n  *   pannerAttr() -> Returns the group's values.\r\n  *   pannerAttr(id) -> Returns the sound id's values.\r\n  *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\r\n  *   pannerAttr(o, id) -> Set's the values of passed sound id.\r\n  *\r\n  *   Attributes:\r\n  *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\r\n  *                      inside of which there will be no volume reduction.\r\n  *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\r\n  *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\r\n  *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\r\n  *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\r\n  *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\r\n  *                     listener. Can be `linear`, `inverse` or `exponential.\r\n  *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\r\n  *                   will not be reduced any further.\r\n  *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\r\n  *                   This is simply a variable of the distance model and has a different effect depending on which model\r\n  *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\r\n  *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\r\n  *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\r\n  *                     with `inverse` and `exponential`.\r\n  *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\r\n  *                     Can be `HRTF` or `equalpower`.\r\n  *\r\n  * @return {Howl/Object} Returns self or current panner attributes.\r\n  */\n\tHowl.prototype.pannerAttr = function () {\n\t\tvar self = this;\n\t\tvar args = arguments;\n\t\tvar o, id, sound;\n\n\t\t// Stop right here if not using Web Audio.\n\t\tif (!self._webAudio) {\n\t\t\treturn self;\n\t\t}\n\n\t\t// Determine the values based on arguments.\n\t\tif (args.length === 0) {\n\t\t\t// Return the group's panner attribute values.\n\t\t\treturn self._pannerAttr;\n\t\t} else if (args.length === 1) {\n\t\t\tif (_typeof(args[0]) === 'object') {\n\t\t\t\to = args[0];\n\n\t\t\t\t// Set the grou's panner attribute values.\n\t\t\t\tif (typeof id === 'undefined') {\n\t\t\t\t\tif (!o.pannerAttr) {\n\t\t\t\t\t\to.pannerAttr = {\n\t\t\t\t\t\t\tconeInnerAngle: o.coneInnerAngle,\n\t\t\t\t\t\t\tconeOuterAngle: o.coneOuterAngle,\n\t\t\t\t\t\t\tconeOuterGain: o.coneOuterGain,\n\t\t\t\t\t\t\tdistanceModel: o.distanceModel,\n\t\t\t\t\t\t\tmaxDistance: o.maxDistance,\n\t\t\t\t\t\t\trefDistance: o.refDistance,\n\t\t\t\t\t\t\trolloffFactor: o.rolloffFactor,\n\t\t\t\t\t\t\tpanningModel: o.panningModel\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tself._pannerAttr = {\n\t\t\t\t\t\tconeInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n\t\t\t\t\t\tconeOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n\t\t\t\t\t\tconeOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n\t\t\t\t\t\tdistanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n\t\t\t\t\t\tmaxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n\t\t\t\t\t\trefDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n\t\t\t\t\t\trolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n\t\t\t\t\t\tpanningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Return this sound's panner attribute values.\n\t\t\t\tsound = self._soundById(parseInt(args[0], 10));\n\t\t\t\treturn sound ? sound._pannerAttr : self._pannerAttr;\n\t\t\t}\n\t\t} else if (args.length === 2) {\n\t\t\to = args[0];\n\t\t\tid = parseInt(args[1], 10);\n\t\t}\n\n\t\t// Update the values of the specified sounds.\n\t\tvar ids = self._getSoundIds(id);\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\tsound = self._soundById(ids[i]);\n\n\t\t\tif (sound) {\n\t\t\t\t// Merge the new values into the sound.\n\t\t\t\tvar pa = sound._pannerAttr;\n\t\t\t\tpa = {\n\t\t\t\t\tconeInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n\t\t\t\t\tconeOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n\t\t\t\t\tconeOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n\t\t\t\t\tdistanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n\t\t\t\t\tmaxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n\t\t\t\t\trefDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n\t\t\t\t\trolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n\t\t\t\t\tpanningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n\t\t\t\t};\n\n\t\t\t\t// Update the panner values or create a new panner if none exists.\n\t\t\t\tvar panner = sound._panner;\n\t\t\t\tif (panner) {\n\t\t\t\t\tpanner.coneInnerAngle = pa.coneInnerAngle;\n\t\t\t\t\tpanner.coneOuterAngle = pa.coneOuterAngle;\n\t\t\t\t\tpanner.coneOuterGain = pa.coneOuterGain;\n\t\t\t\t\tpanner.distanceModel = pa.distanceModel;\n\t\t\t\t\tpanner.maxDistance = pa.maxDistance;\n\t\t\t\t\tpanner.refDistance = pa.refDistance;\n\t\t\t\t\tpanner.rolloffFactor = pa.rolloffFactor;\n\t\t\t\t\tpanner.panningModel = pa.panningModel;\n\t\t\t\t} else {\n\t\t\t\t\t// Make sure we have a position to setup the node with.\n\t\t\t\t\tif (!sound._pos) {\n\t\t\t\t\t\tsound._pos = self._pos || [0, 0, -0.5];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create a new panner node.\n\t\t\t\t\tsetupPanner(sound, 'spatial');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn self;\n\t};\n\n\t/** Single Sound Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Add new properties to the core Sound init.\r\n  * @param  {Function} _super Core Sound init method.\r\n  * @return {Sound}\r\n  */\n\tSound.prototype.init = function (_super) {\n\t\treturn function () {\n\t\t\tvar self = this;\n\t\t\tvar parent = self._parent;\n\n\t\t\t// Setup user-defined default properties.\n\t\t\tself._orientation = parent._orientation;\n\t\t\tself._stereo = parent._stereo;\n\t\t\tself._pos = parent._pos;\n\t\t\tself._pannerAttr = parent._pannerAttr;\n\n\t\t\t// Complete initilization with howler.js core Sound's init function.\n\t\t\t_super.call(this);\n\n\t\t\t// If a stereo or position was specified, set it up.\n\t\t\tif (self._stereo) {\n\t\t\t\tparent.stereo(self._stereo);\n\t\t\t} else if (self._pos) {\n\t\t\t\tparent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n\t\t\t}\n\t\t};\n\t}(Sound.prototype.init);\n\n\t/**\r\n  * Override the Sound.reset method to clean up properties from the spatial plugin.\r\n  * @param  {Function} _super Sound reset method.\r\n  * @return {Sound}\r\n  */\n\tSound.prototype.reset = function (_super) {\n\t\treturn function () {\n\t\t\tvar self = this;\n\t\t\tvar parent = self._parent;\n\n\t\t\t// Reset all spatial plugin properties on this sound.\n\t\t\tself._orientation = parent._orientation;\n\t\t\tself._stereo = parent._stereo;\n\t\t\tself._pos = parent._pos;\n\t\t\tself._pannerAttr = parent._pannerAttr;\n\n\t\t\t// If a stereo or position was specified, set it up.\n\t\t\tif (self._stereo) {\n\t\t\t\tparent.stereo(self._stereo);\n\t\t\t} else if (self._pos) {\n\t\t\t\tparent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n\t\t\t} else if (self._panner) {\n\t\t\t\t// Disconnect the panner.\n\t\t\t\tself._panner.disconnect(0);\n\t\t\t\tself._panner = undefined;\n\t\t\t\tparent._refreshBuffer(self);\n\t\t\t}\n\n\t\t\t// Complete resetting of the sound.\n\t\t\treturn _super.call(this);\n\t\t};\n\t}(Sound.prototype.reset);\n\n\t/** Helper Methods **/\n\t/***************************************************************************/\n\n\t/**\r\n  * Create a new panner node and save it on the sound.\r\n  * @param  {Sound} sound Specific sound to setup panning on.\r\n  * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\r\n  */\n\tvar setupPanner = function setupPanner(sound, type) {\n\t\ttype = type || 'spatial';\n\n\t\t// Create the new panner node.\n\t\tif (type === 'spatial') {\n\t\t\tsound._panner = Howler.ctx.createPanner();\n\t\t\tsound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n\t\t\tsound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n\t\t\tsound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n\t\t\tsound._panner.distanceModel = sound._pannerAttr.distanceModel;\n\t\t\tsound._panner.maxDistance = sound._pannerAttr.maxDistance;\n\t\t\tsound._panner.refDistance = sound._pannerAttr.refDistance;\n\t\t\tsound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n\t\t\tsound._panner.panningModel = sound._pannerAttr.panningModel;\n\n\t\t\tif (typeof sound._panner.positionX !== 'undefined') {\n\t\t\t\tsound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\t\t\t\tsound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\t\t\t\tsound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n\t\t\t} else {\n\t\t\t\tsound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n\t\t\t}\n\n\t\t\tif (typeof sound._panner.orientationX !== 'undefined') {\n\t\t\t\tsound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\t\t\t\tsound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\t\t\t\tsound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n\t\t\t} else {\n\t\t\t\tsound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n\t\t\t}\n\t\t} else {\n\t\t\tsound._panner = Howler.ctx.createStereoPanner();\n\t\t\tsound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n\t\t}\n\n\t\tsound._panner.connect(sound._node);\n\n\t\t// Update the connections.\n\t\tif (!sound._paused) {\n\t\t\tsound._parent.pause(sound._id, true).play(sound._id, true);\n\t\t}\n\t};\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = getScrollWidth;\nfunction getScrollWidth() {\n\tvar div = document.createElement('div');\n\n\tdiv.style.overflowY = 'scroll';\n\tdiv.style.width = '50px';\n\tdiv.style.height = '50px';\n\n\tdiv.style.visibility = 'hidden';\n\n\tdocument.body.appendChild(div);\n\tvar scrollWidth = div.offsetWidth - div.clientWidth;\n\tdocument.body.removeChild(div);\n\n\treturn scrollWidth;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvZ2V0U2Nyb2xsV2lkdGguanM/MDU5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxXaWR0aCgpIHtcclxuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG5cdGRpdi5zdHlsZS5vdmVyZmxvd1kgPSAnc2Nyb2xsJztcclxuXHRkaXYuc3R5bGUud2lkdGggPSAnNTBweCc7XHJcblx0ZGl2LnN0eWxlLmhlaWdodCA9ICc1MHB4JztcclxuXHJcblx0ZGl2LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuXHJcblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xyXG5cdHZhciBzY3JvbGxXaWR0aCA9IGRpdi5vZmZzZXRXaWR0aCAtIGRpdi5jbGllbnRXaWR0aDtcclxuXHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRpdik7XHJcblxyXG5cdHJldHVybiBzY3JvbGxXaWR0aDtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n__webpack_require__(3);\n\nvar _tools = __webpack_require__(4);\n\nvar Tools = _interopRequireWildcard(_tools);\n\nvar _SoundRouter = __webpack_require__(11);\n\nvar _SoundRouter2 = _interopRequireDefault(_SoundRouter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\t_SoundRouter2.default.init();\n});\n\nwindow.addEventListener('load', function () {});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvYXBwLmpzPzAzNTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2xpYi9wb2x5ZmlsbHMnO1xyXG5pbXBvcnQgKiBhcyBUb29scyBmcm9tICcuL3Rvb2xzJztcclxuaW1wb3J0IFNvdW5kUm91dGVyIGZyb20gJy4vY29yZS9zb3VuZC9Tb3VuZFJvdXRlcic7XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG5cdFNvdW5kUm91dGVyLmluaXQoKTtcclxufSk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBOzs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\n// Element.matches();\n(function (el) {\n\tel.matches || (el.matches = el.matchesSelector || function (selector) {\n\t\tvar matches = document.querySelectorAll(selector),\n\t\t    th = this;\n\t\treturn Array.prototype.some.call(matches, function (el) {\n\t\t\treturn el === th;\n\t\t});\n\t});\n})(Element.prototype);\n\n// Element.closest()\n(function (el) {\n\tel.matches = el.matches || el.mozMatchesSelector || el.msMatchesSelector || el.oMatchesSelector || el.webkitMatchesSelector;\n\tel.closest = el.closest || function closest(selector) {\n\t\tif (!this) return null;\n\t\tif (this.matches(selector)) return this;\n\t\tif (!this.parentElement) {\n\t\t\treturn null;\n\t\t} else return this.parentElement.closest(selector);\n\t};\n})(Element.prototype);\n\n// Node.remove()\n(function () {\n\tvar arr = [window.Element, window.CharacterData, window.DocumentType];\n\tvar args = [];\n\n\tarr.forEach(function (item) {\n\t\tif (item) {\n\t\t\targs.push(item.prototype);\n\t\t}\n\t});\n\n\t// from:https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/remove()/remove().md\n\t(function (arr) {\n\t\tarr.forEach(function (item) {\n\t\t\tif (item.hasOwnProperty('remove')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tObject.defineProperty(item, 'remove', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: true,\n\t\t\t\tvalue: function remove() {\n\t\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t})(args);\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbGliL3BvbHlmaWxscy5qcz9lM2VmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVsZW1lbnQubWF0Y2hlcygpO1xyXG4oZnVuY3Rpb24oZWwpIHtcclxuXHRlbC5tYXRjaGVzIHx8IChlbC5tYXRjaGVzID0gZWwubWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcblx0XHR2YXIgbWF0Y2hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLFxyXG5cdFx0XHR0aCA9IHRoaXM7XHJcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChtYXRjaGVzLCBmdW5jdGlvbihlbCkge1xyXG5cdFx0XHRyZXR1cm4gZWwgPT09IHRoO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn0pKEVsZW1lbnQucHJvdG90eXBlKTtcclxuXHJcbi8vIEVsZW1lbnQuY2xvc2VzdCgpXHJcbihmdW5jdGlvbihlbCkge1xyXG5cdGVsLm1hdGNoZXMgPSBlbC5tYXRjaGVzIHx8IGVsLm1vek1hdGNoZXNTZWxlY3RvciB8fCBlbC5tc01hdGNoZXNTZWxlY3RvciB8fCBlbC5vTWF0Y2hlc1NlbGVjdG9yIHx8IGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcclxuXHRlbC5jbG9zZXN0ID0gZWwuY2xvc2VzdCB8fCBmdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XHJcblx0XHRpZiAoIXRoaXMpIHJldHVybiBudWxsO1xyXG5cdFx0aWYgKHRoaXMubWF0Y2hlcyhzZWxlY3RvcikpIHJldHVybiB0aGlzO1xyXG5cdFx0aWYgKCF0aGlzLnBhcmVudEVsZW1lbnQpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9IGVsc2UgcmV0dXJuIHRoaXMucGFyZW50RWxlbWVudC5jbG9zZXN0KHNlbGVjdG9yKTtcclxuXHR9O1xyXG59KEVsZW1lbnQucHJvdG90eXBlKSk7XHJcblxyXG4vLyBOb2RlLnJlbW92ZSgpXHJcbihmdW5jdGlvbigpIHtcclxuXHR2YXIgYXJyID0gW3dpbmRvdy5FbGVtZW50LCB3aW5kb3cuQ2hhcmFjdGVyRGF0YSwgd2luZG93LkRvY3VtZW50VHlwZV07XHJcblx0dmFyIGFyZ3MgPSBbXTtcclxuXHJcblx0YXJyLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG5cdFx0aWYgKGl0ZW0pIHtcclxuXHRcdFx0YXJncy5wdXNoKGl0ZW0ucHJvdG90eXBlKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly8gZnJvbTpodHRwczovL2dpdGh1Yi5jb20vanNlcnovanNfcGllY2UvYmxvYi9tYXN0ZXIvRE9NL0NoaWxkTm9kZS9yZW1vdmUoKS9yZW1vdmUoKS5tZFxyXG5cdChmdW5jdGlvbihhcnIpIHtcclxuXHRcdGFyci5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHRcdFx0aWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3JlbW92ZScpKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdGVtLCAncmVtb3ZlJywge1xyXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxyXG5cdFx0XHRcdHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0pKGFyZ3MpO1xyXG59KSgpO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _localStorageAvailable = __webpack_require__(5);\n\nObject.defineProperty(exports, 'localStorageAvailable', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_localStorageAvailable).default;\n  }\n});\n\nvar _getScrollWidth = __webpack_require__(1);\n\nObject.defineProperty(exports, 'getScrollWidth', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_getScrollWidth).default;\n  }\n});\n\nvar _onWindowResize = __webpack_require__(6);\n\nObject.defineProperty(exports, 'onWindowResize', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_onWindowResize).default;\n  }\n});\n\nvar _hideScroll = __webpack_require__(7);\n\nObject.defineProperty(exports, 'hideScroll', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_hideScroll).default;\n  }\n});\n\nvar _IEDetect = __webpack_require__(8);\n\nObject.defineProperty(exports, 'IEDetect', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_IEDetect).default;\n  }\n});\n\nvar _debug = __webpack_require__(9);\n\nObject.defineProperty(exports, 'debug', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_debug).default;\n  }\n});\n\nvar _xhr = __webpack_require__(10);\n\nObject.defineProperty(exports, 'xhr', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_xhr).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvaW5kZXguanM/NzE4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIGxvY2FsU3RvcmFnZUF2YWlsYWJsZSB9IGZyb20gJy4vbG9jYWxTdG9yYWdlQXZhaWxhYmxlJztcclxuLy8gZXhwb3J0IHsgZGVmYXVsdCBhcyBzY3JvbGxQYWdlVG9Ub3AgfSBmcm9tICcuL3Njcm9sbFBhZ2VUb1RvcCc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZ2V0U2Nyb2xsV2lkdGggfSBmcm9tICcuL2dldFNjcm9sbFdpZHRoJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyBvbldpbmRvd1Jlc2l6ZSB9IGZyb20gJy4vb25XaW5kb3dSZXNpemUnO1xyXG4vLyBleHBvcnQgeyBkZWZhdWx0IGFzIENvbnN0YW50c30gZnJvbSAnLi9Db25zdGFudHMnO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIGhpZGVTY3JvbGwgfSBmcm9tICcuL2hpZGVTY3JvbGwnO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIElFRGV0ZWN0IH0gZnJvbSAnLi9JRURldGVjdCc7XHJcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZGVidWcgfSBmcm9tICcuL2RlYnVnJztcclxuZXhwb3J0IHsgZGVmYXVsdCBhcyB4aHIgfSBmcm9tICcuL3hocic7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7OztBQUNBOzs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7O0FBQ0E7Ozs7Ozs7OztBQUNBOzs7Ozs7Ozs7QUFDQTs7OztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = localStorageAvailable;\n/**\r\n * Проверка поддержки localStorage\r\n * @returns {boolean}\r\n */\n\nfunction localStorageAvailable() {\n\tvar storage = void 0;\n\ttry {\n\t\tvar x = '__storage_test__';\n\t\tstorage = window.localStorage;\n\t\tstorage.setItem(x, x);\n\t\tstorage.removeItem(x);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn e instanceof DOMException && (\n\t\t// everything except Firefox\n\t\te.code === 22 ||\n\t\t// Firefox\n\t\te.code === 1014 ||\n\t\t// test name field too, because code might not be present\n\t\t// everything except Firefox\n\t\te.name === 'QuotaExceededError' ||\n\t\t// Firefox\n\t\te.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n\t\t// acknowledge QuotaExceededError only if there's something already stored\n\t\tstorage.length !== 0;\n\t}\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvbG9jYWxTdG9yYWdlQXZhaWxhYmxlLmpzPzY3NjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqINCf0YDQvtCy0LXRgNC60LAg0L/QvtC00LTQtdGA0LbQutC4IGxvY2FsU3RvcmFnZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VBdmFpbGFibGUoKSB7XHJcblx0bGV0IHN0b3JhZ2U7XHJcblx0dHJ5IHtcclxuXHRcdGNvbnN0IHggPSAnX19zdG9yYWdlX3Rlc3RfXyc7XHJcblx0XHRzdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcclxuXHRcdHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcclxuXHRcdHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0gY2F0Y2ggKGUpIHtcclxuXHRcdHJldHVybiBlIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIChcclxuXHRcdC8vIGV2ZXJ5dGhpbmcgZXhjZXB0IEZpcmVmb3hcclxuXHRcdFx0ZS5jb2RlID09PSAyMiB8fFxyXG5cdFx0XHRcdC8vIEZpcmVmb3hcclxuXHRcdFx0XHRlLmNvZGUgPT09IDEwMTQgfHxcclxuXHRcdFx0XHQvLyB0ZXN0IG5hbWUgZmllbGQgdG9vLCBiZWNhdXNlIGNvZGUgbWlnaHQgbm90IGJlIHByZXNlbnRcclxuXHRcdFx0XHQvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XHJcblx0XHRcdFx0ZS5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fFxyXG5cdFx0XHRcdC8vIEZpcmVmb3hcclxuXHRcdFx0XHRlLm5hbWUgPT09ICdOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRCcpICYmXHJcblx0XHRcdC8vIGFja25vd2xlZGdlIFF1b3RhRXhjZWVkZWRFcnJvciBvbmx5IGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGFscmVhZHkgc3RvcmVkXHJcblx0XHRcdHN0b3JhZ2UubGVuZ3RoICE9PSAwO1xyXG5cdH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBS0E7QUFMQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n/**\r\n * Отслеживает изменение размеров окна браузера и вызывает cb если привысело время указанное в duration\r\n * @param {function} cb каллбэк\r\n * @param {number} [duration=300] интервал в миллисикундах\r\n */\n\nfunction onWindowResize(cb) {\n\tvar duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n\n\tvar timeout = void 0;\n\twindow.addEventListener('resize', function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(cb, duration);\n\t});\n}\n\nexports.default = onWindowResize;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvb25XaW5kb3dSZXNpemUuanM/Y2M1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog0J7RgtGB0LvQtdC20LjQstCw0LXRgiDQuNC30LzQtdC90LXQvdC40LUg0YDQsNC30LzQtdGA0L7QsiDQvtC60L3QsCDQsdGA0LDRg9C30LXRgNCwINC4INCy0YvQt9GL0LLQsNC10YIgY2Ig0LXRgdC70Lgg0L/RgNC40LLRi9GB0LXQu9C+INCy0YDQtdC80Y8g0YPQutCw0LfQsNC90L3QvtC1INCyIGR1cmF0aW9uXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiINC60LDQu9C70LHRjdC6XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZHVyYXRpb249MzAwXSDQuNC90YLQtdGA0LLQsNC7INCyINC80LjQu9C70LjRgdC40LrRg9C90LTQsNGFXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoY2IsIGR1cmF0aW9uID0gMzAwKSB7XHJcblx0bGV0IHRpbWVvdXQ7XHJcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG5cdFx0dGltZW91dCA9IHNldFRpbWVvdXQoY2IsIGR1cmF0aW9uKTtcclxuXHR9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgb25XaW5kb3dSZXNpemU7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7O0FBTUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = hideScroll;\n\nvar _getScrollWidth = __webpack_require__(1);\n\nvar _getScrollWidth2 = _interopRequireDefault(_getScrollWidth);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar header = null;\nvar body = null;\nvar scrollTop = 0;\n\nfunction hideScroll(isHide) {\n\t// header = header || document.querySelector('#header');\n\tbody = body || document.body;\n\n\tif (!body) {\n\t\tconsole.warn('Error: hideScroll()');\n\t\treturn;\n\t}\n\n\trequestAnimationFrame(function () {\n\t\tif (isHide) {\n\t\t\tscrollTop = window.pageYOffset;\n\t\t\twindow.document.documentElement.style.scrollBehavior = 'auto';\n\t\t\tbody.style.top = -scrollTop + 'px';\n\t\t\tbody.style.paddingRight = (0, _getScrollWidth2.default)() + 'px';\n\t\t\tif (header) {\n\t\t\t\theader.style.paddingRight = (0, _getScrollWidth2.default)() + 'px';\n\t\t\t}\n\t\t\tbody.style.position = 'fixed';\n\t\t\tbody.style.overflow = 'hidden';\n\t\t\tbody.classList.add('open-modal');\n\t\t} else {\n\t\t\tbody.style.position = '';\n\t\t\tbody.style.overflow = '';\n\t\t\tbody.classList.remove('open-modal');\n\t\t\tbody.style.paddingRight = '';\n\t\t\tif (header) {\n\t\t\t\theader.style.paddingRight = '';\n\t\t\t}\n\t\t\twindow.scrollTo(0, scrollTop);\n\t\t\twindow.document.documentElement.style.scrollBehavior = '';\n\t\t}\n\t});\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvaGlkZVNjcm9sbC5qcz8zNzMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRTY3JvbGxXaWR0aCBmcm9tICcuL2dldFNjcm9sbFdpZHRoJztcclxuXHJcbmxldCBoZWFkZXIgPSBudWxsO1xyXG5sZXQgYm9keSA9IG51bGw7XHJcbmxldCBzY3JvbGxUb3AgPSAwO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGlkZVNjcm9sbChpc0hpZGUpIHtcclxuXHQvLyBoZWFkZXIgPSBoZWFkZXIgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlYWRlcicpO1xyXG5cdGJvZHkgPSBib2R5IHx8IGRvY3VtZW50LmJvZHk7XHJcblxyXG5cdGlmICghYm9keSkge1xyXG5cdFx0Y29uc29sZS53YXJuKCdFcnJvcjogaGlkZVNjcm9sbCgpJyk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdFxyXG5cdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRpZiAoaXNIaWRlKSB7XHJcblx0XHRcdHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuXHRcdFx0d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9ICdhdXRvJztcclxuXHRcdFx0Ym9keS5zdHlsZS50b3AgPSAtc2Nyb2xsVG9wICsgJ3B4JztcclxuXHRcdFx0Ym9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBnZXRTY3JvbGxXaWR0aCgpICsgJ3B4JztcclxuXHRcdFx0aWYgKGhlYWRlcikge1xyXG5cdFx0XHRcdGhlYWRlci5zdHlsZS5wYWRkaW5nUmlnaHQgPSBnZXRTY3JvbGxXaWR0aCgpICsgJ3B4JztcclxuXHRcdFx0fVxyXG5cdFx0XHRib2R5LnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuXHRcdFx0Ym9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG5cdFx0XHRib2R5LmNsYXNzTGlzdC5hZGQoJ29wZW4tbW9kYWwnKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGJvZHkuc3R5bGUucG9zaXRpb24gPSAnJztcclxuXHRcdFx0Ym9keS5zdHlsZS5vdmVyZmxvdyA9ICcnO1xyXG5cdFx0XHRib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4tbW9kYWwnKTtcclxuXHRcdFx0Ym9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcclxuXHRcdFx0aWYgKGhlYWRlcikge1xyXG5cdFx0XHRcdGhlYWRlci5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcclxuXHRcdFx0fVxyXG5cdFx0XHR3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsVG9wKTtcclxuXHRcdFx0d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zY3JvbGxCZWhhdmlvciA9ICcnO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFNQTtBQUNBO0FBUEE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = IEDetect;\nfunction IEDetect() {\n\tvar sAgent = window.navigator.userAgent;\n\tvar Idx = sAgent.indexOf('MSIE');\n\n\t// If IE, return version number.\n\tif (Idx > 0) return parseInt(sAgent.substring(Idx + 5, sAgent.indexOf('.', Idx)));\n\n\t// If IE 11 then look for Updated user agent string.\n\telse if (!!navigator.userAgent.match(/Trident\\/7\\./)) return 11;else return 0; //It is not IE\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvSUVEZXRlY3QuanM/MWVlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJRURldGVjdCgpIHtcclxuXHR2YXIgc0FnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XHJcblx0dmFyIElkeCA9IHNBZ2VudC5pbmRleE9mKCdNU0lFJyk7XHJcblxyXG5cdC8vIElmIElFLCByZXR1cm4gdmVyc2lvbiBudW1iZXIuXHJcblx0aWYgKElkeCA+IDApXHJcblx0XHRyZXR1cm4gcGFyc2VJbnQoc0FnZW50LnN1YnN0cmluZyhJZHggKyA1LCBzQWdlbnQuaW5kZXhPZignLicsIElkeCkpKTtcclxuXHJcblx0Ly8gSWYgSUUgMTEgdGhlbiBsb29rIGZvciBVcGRhdGVkIHVzZXIgYWdlbnQgc3RyaW5nLlxyXG5cdGVsc2UgaWYgKCEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudFxcLzdcXC4vKSlcclxuXHRcdHJldHVybiAxMTtcclxuXHJcblx0ZWxzZVxyXG5cdFx0cmV0dXJuIDA7IC8vSXQgaXMgbm90IElFXHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUhBO0FBU0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Debug = function () {\n\tfunction Debug() {\n\t\t_classCallCheck(this, Debug);\n\t}\n\n\t_createClass(Debug, null, [{\n\t\tkey: 'isLocal',\n\n\t\t/**\r\n      * Проверка на соответсвие имени хоста\r\n      * @param {String|String[]} arr - добавление доверенных хостов\r\n      * @returns boolean\r\n      */\n\t\tvalue: function isLocal(arr) {\n\t\t\tvar locals = ['localhost', '192.168', 'herokuapp', 'github'];\n\t\t\tvar concatArr = locals.concat(arr);\n\t\t\tvar currentHostname = location && location.hostname ? location.hostname : false;\n\t\t\treturn concatArr.some(function (hostname) {\n\t\t\t\treturn currentHostname.indexOf(hostname);\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn Debug;\n}();\n\nexports.default = Debug;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdG9vbHMvZGVidWcuanM/NWUxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBEZWJ1ZyB7XHJcblx0LyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINC90LAg0YHQvtC+0YLQstC10YLRgdCy0LjQtSDQuNC80LXQvdC4INGF0L7RgdGC0LBcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfFN0cmluZ1tdfSBhcnIgLSDQtNC+0LHQsNCy0LvQtdC90LjQtSDQtNC+0LLQtdGA0LXQvdC90YvRhSDRhdC+0YHRgtC+0LJcclxuICAgICAqIEByZXR1cm5zIGJvb2xlYW5cclxuICAgICAqL1xyXG5cdHN0YXRpYyBpc0xvY2FsKGFycikge1xyXG5cdFx0bGV0IGxvY2FscyA9IFsnbG9jYWxob3N0JywgJzE5Mi4xNjgnLCAnaGVyb2t1YXBwJywgJ2dpdGh1YiddO1xyXG5cdFx0bGV0IGNvbmNhdEFyciA9IGxvY2Fscy5jb25jYXQoYXJyKTtcclxuXHRcdGxldCBjdXJyZW50SG9zdG5hbWUgPSAobG9jYXRpb24gJiYgbG9jYXRpb24uaG9zdG5hbWUpID8gbG9jYXRpb24uaG9zdG5hbWUgOiBmYWxzZTtcclxuXHRcdHJldHVybiBjb25jYXRBcnIuc29tZSgoaG9zdG5hbWUpID0+IGN1cnJlbnRIb3N0bmFtZS5pbmRleE9mKGhvc3RuYW1lKSk7XHJcblx0fTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBOzs7Ozs7QUFYQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = xhr;\n/**\r\n * XMLHttpRexuest\r\n * \r\n * @param {string} url \r\n * @param {string} type \r\n * @param {object} callback\r\n * \r\n * @example\r\n * xhr('../data/file.json', 'json', function() {\r\n *     // do somthing\r\n * })\r\n */\nfunction xhr(url, type, callback) {\n  var xhr = new XMLHttpRequest();\n\n  xhr.open('GET', url);\n  xhr.responseType = type;\n  xhr.send();\n  xhr.onload = function () {\n    if (callback) {\n      callback(xhr.response);\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL3Rvb2xzL3hoci5qcz8yMDAzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBYTUxIdHRwUmV4dWVzdFxyXG4gKiBcclxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBcclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjYWxsYmFja1xyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogeGhyKCcuLi9kYXRhL2ZpbGUuanNvbicsICdqc29uJywgZnVuY3Rpb24oKSB7XHJcbiAqICAgICAvLyBkbyBzb210aGluZ1xyXG4gKiB9KVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24geGhyKHVybCwgdHlwZSwgY2FsbGJhY2spIHtcclxuXHR2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG5cdHhoci5vcGVuKCdHRVQnLCB1cmwpO1xyXG5cdHhoci5yZXNwb25zZVR5cGUgPSB0eXBlO1xyXG5cdHhoci5zZW5kKCk7XHJcblx0eGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKGNhbGxiYWNrKSB7XHJcblx0XHRcdGNhbGxiYWNrKHhoci5yZXNwb25zZSk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBWUE7QUFaQTs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _howler = __webpack_require__(0);\n\nvar _SoundEvents = __webpack_require__(13);\n\nvar _SoundEvents2 = _interopRequireDefault(_SoundEvents);\n\nvar _SoundControl = __webpack_require__(14);\n\nvar _SoundControl2 = _interopRequireDefault(_SoundControl);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function SoundRouter() {\n\tvar THIS = {};\n\n\tTHIS.init = function () {\n\t\t_SoundEvents2.default.init();\n\t\t_SoundControl2.default.init();\n\t\tbackground();\n\t};\n\n\tfunction getPath() {\n\t\tif (/github/.test(location.href)) {\n\t\t\treturn '/audio/build/sounds/';\n\t\t} else {\n\t\t\treturn '/sounds/';\n\t\t}\n\t}\n\n\tfunction background() {\n\t\tvar sound = new _howler.Howl({\n\t\t\tsrc: [getPath() + 'background.mp3'],\n\t\t\tloop: true,\n\t\t\tvolume: 0.1,\n\t\t\tautoplay: true\n\t\t});\n\t}\n\n\treturn THIS;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvcmUvc291bmQvU291bmRSb3V0ZXIuanM/OGExNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdEhvd2xcclxufSBmcm9tICcuLi8uLi9saWIvaG93bGVyJztcclxuaW1wb3J0IFNvdW5kRXZlbnRzIGZyb20gJy4vU291bmRFdmVudHMnO1xyXG5pbXBvcnQgU291bmRDb250cm9sIGZyb20gJy4vU291bmRDb250cm9sJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiBTb3VuZFJvdXRlcigpIHtcclxuXHRjb25zdCBUSElTID0ge307XHJcblx0XHJcblx0VEhJUy5pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRTb3VuZEV2ZW50cy5pbml0KCk7XHJcblx0XHRTb3VuZENvbnRyb2wuaW5pdCgpO1xyXG5cdFx0YmFja2dyb3VuZCgpO1xyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIGdldFBhdGgoKSB7XHJcblx0XHRpZiAoL2dpdGh1Yi8udGVzdChsb2NhdGlvbi5ocmVmKSkge1xyXG5cdFx0XHRyZXR1cm4gJy9hdWRpby9idWlsZC9zb3VuZHMvJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiAnL3NvdW5kcy8nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gYmFja2dyb3VuZCgpIHtcclxuXHRcdGNvbnN0IHNvdW5kID0gbmV3IEhvd2woe1xyXG5cdFx0XHRzcmM6IFtnZXRQYXRoKCkgKyAnYmFja2dyb3VuZC5tcDMnXSxcclxuXHRcdFx0bG9vcDogdHJ1ZSxcclxuXHRcdFx0dm9sdW1lOiAwLjEsXHJcblx0XHRcdGF1dG9wbGF5OiB0cnVlXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBUSElTO1xyXG59KSgpO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function("return this")() || (1, eval)("this");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _howler = __webpack_require__(0);\n\n/**\r\n * Обработка событий и воспроизведение звуков\r\n */\nexports.default = function SoundEvents() {\n\tvar THIS = {};\n\tvar soundList = {};\n\tvar isMouseDown = false;\n\n\tTHIS.init = function () {\n\t\tTHIS.body = document.body;\n\t\tmouseDownListener();\n\t\thoverListener();\n\t};\n\n\tfunction getPath() {\n\t\tif (/github/.test(location.href)) {\n\t\t\treturn '/audio/build/sounds/';\n\t\t} else {\n\t\t\treturn '/sounds/';\n\t\t}\n\t}\n\n\tfunction handler(prop) {\n\t\tvar src = prop.src[0];\n\t\tif (!soundList[src]) {\n\t\t\tsoundList[src] = new _howler.Howl(prop);\n\t\t} else {\n\t\t\tsoundList[src].play();\n\t\t}\n\t};\n\n\tfunction mouseDownListener() {\n\t\tTHIS.body.addEventListener('mousedown', function (e) {\n\t\t\tisMouseDown = true;\n\t\t\tsetTimeout(function () {\n\t\t\t\tisMouseDown = false;\n\t\t\t}, 0);\n\t\t\tvar t = e.target;\n\t\t\twhile (t && t !== THIS.body) {\n\t\t\t\tif (t && t.matches('[data-sound-press-src]')) {\n\t\t\t\t\tTHIS.currentElement = t;\n\t\t\t\t\tvar src = t.dataset.soundPressSrc || '';\n\t\t\t\t\tvar volume = t.dataset.soundPressVolume || 1;\n\t\t\t\t\thandler({\n\t\t\t\t\t\tsrc: [getPath() + src],\n\t\t\t\t\t\tvolume: volume,\n\t\t\t\t\t\tautoplay: true\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (t) t = t.parentNode;\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction hoverListener() {\n\t\tTHIS.body.addEventListener('mouseover', function (e) {\n\t\t\tif (THIS.currentElement) return;\n\t\t\tvar t = e.target;\n\t\t\twhile (t && t !== THIS.body) {\n\t\t\t\tif (t && t.matches('[data-sound-hover-src]')) {\n\t\t\t\t\tTHIS.currentElement = t;\n\t\t\t\t\tvar src = t.dataset.soundHoverSrc || '';\n\t\t\t\t\tvar volume = t.dataset.soundHoverVolume || 1;\n\t\t\t\t\thandler({\n\t\t\t\t\t\tsrc: [getPath() + src],\n\t\t\t\t\t\tvolume: volume,\n\t\t\t\t\t\tautoplay: true\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (t) t = t.parentNode;\n\t\t\t}\n\t\t});\n\n\t\tTHIS.body.addEventListener('mouseout', function (e) {\n\t\t\tif (!THIS.currentElement || isMouseDown) return;\n\t\t\tvar rt = e.relatedTarget;\n\t\t\twhile (rt && rt !== THIS.body) {\n\t\t\t\tif (rt === THIS.currentElement) return;\n\t\t\t\tif (rt) rt = rt.parentNode;\n\t\t\t}\n\t\t\tTHIS.currentElement = null;\n\t\t});\n\t};\n\n\treturn THIS;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvcmUvc291bmQvU291bmRFdmVudHMuanM/YjI3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdEhvd2xcclxufSBmcm9tICcuLi8uLi9saWIvaG93bGVyJztcclxuXHJcbi8qKlxyXG4gKiDQntCx0YDQsNCx0L7RgtC60LAg0YHQvtCx0YvRgtC40Lkg0Lgg0LLQvtGB0L/RgNC+0LjQt9Cy0LXQtNC10L3QuNC1INC30LLRg9C60L7QslxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIFNvdW5kRXZlbnRzKCkge1xyXG5cdGNvbnN0IFRISVMgPSB7fTtcclxuXHRjb25zdCBzb3VuZExpc3QgPSB7fTtcclxuXHRsZXQgaXNNb3VzZURvd24gPSBmYWxzZTtcclxuXHJcblx0VEhJUy5pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRUSElTLmJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cdFx0bW91c2VEb3duTGlzdGVuZXIoKTtcclxuXHRcdGhvdmVyTGlzdGVuZXIoKTtcclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBnZXRQYXRoKCkge1xyXG5cdFx0aWYgKC9naXRodWIvLnRlc3QobG9jYXRpb24uaHJlZikpIHtcclxuXHRcdFx0cmV0dXJuICcvYXVkaW8vYnVpbGQvc291bmRzLyc7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gJy9zb3VuZHMvJztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGhhbmRsZXIocHJvcCkge1xyXG5cdFx0bGV0IHNyYyA9IHByb3Auc3JjWzBdO1xyXG5cdFx0aWYgKCFzb3VuZExpc3Rbc3JjXSkge1xyXG5cdFx0XHRzb3VuZExpc3Rbc3JjXSA9IG5ldyBIb3dsKHByb3ApO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c291bmRMaXN0W3NyY10ucGxheSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIG1vdXNlRG93bkxpc3RlbmVyKCkge1xyXG5cdFx0VEhJUy5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XHJcblx0XHRcdGlzTW91c2VEb3duID0gdHJ1ZTtcclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0aXNNb3VzZURvd24gPSBmYWxzZTtcclxuXHRcdFx0fSwgMCk7XHJcblx0XHRcdGxldCB0ID0gZS50YXJnZXQ7XHJcblx0XHRcdHdoaWxlICh0ICYmIHQgIT09IFRISVMuYm9keSkge1xyXG5cdFx0XHRcdGlmICh0ICYmIHQubWF0Y2hlcygnW2RhdGEtc291bmQtcHJlc3Mtc3JjXScpKSB7XHJcblx0XHRcdFx0XHRUSElTLmN1cnJlbnRFbGVtZW50ID0gdDtcclxuXHRcdFx0XHRcdGxldCBzcmMgPSB0LmRhdGFzZXQuc291bmRQcmVzc1NyYyB8fCAnJztcclxuXHRcdFx0XHRcdGxldCB2b2x1bWUgPSB0LmRhdGFzZXQuc291bmRQcmVzc1ZvbHVtZSB8fCAxO1xyXG5cdFx0XHRcdFx0aGFuZGxlcih7XHJcblx0XHRcdFx0XHRcdHNyYzogW2dldFBhdGgoKSArIHNyY10sXHJcblx0XHRcdFx0XHRcdHZvbHVtZTogdm9sdW1lLFxyXG5cdFx0XHRcdFx0XHRhdXRvcGxheTogdHJ1ZVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0KSB0ID0gdC5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cdFxyXG5cdGZ1bmN0aW9uIGhvdmVyTGlzdGVuZXIoKSB7XHJcblx0XHRUSElTLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcclxuXHRcdFx0aWYgKFRISVMuY3VycmVudEVsZW1lbnQpIHJldHVybjtcclxuXHRcdFx0bGV0IHQgPSBlLnRhcmdldDtcclxuXHRcdFx0d2hpbGUgKHQgJiYgdCAhPT0gVEhJUy5ib2R5KSB7XHJcblx0XHRcdFx0aWYgKHQgJiYgdC5tYXRjaGVzKCdbZGF0YS1zb3VuZC1ob3Zlci1zcmNdJykpIHtcclxuXHRcdFx0XHRcdFRISVMuY3VycmVudEVsZW1lbnQgPSB0O1xyXG5cdFx0XHRcdFx0bGV0IHNyYyA9IHQuZGF0YXNldC5zb3VuZEhvdmVyU3JjIHx8ICcnO1xyXG5cdFx0XHRcdFx0bGV0IHZvbHVtZSA9IHQuZGF0YXNldC5zb3VuZEhvdmVyVm9sdW1lIHx8IDE7XHJcblx0XHRcdFx0XHRoYW5kbGVyKHtcclxuXHRcdFx0XHRcdFx0c3JjOiBbZ2V0UGF0aCgpICsgc3JjXSxcclxuXHRcdFx0XHRcdFx0dm9sdW1lOiB2b2x1bWUsXHJcblx0XHRcdFx0XHRcdGF1dG9wbGF5OiB0cnVlXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHQpIHQgPSB0LnBhcmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHRUSElTLmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoZSkgPT4ge1xyXG5cdFx0XHRpZiAoIVRISVMuY3VycmVudEVsZW1lbnQgfHwgaXNNb3VzZURvd24pIHJldHVybjtcclxuXHRcdFx0bGV0IHJ0ID0gZS5yZWxhdGVkVGFyZ2V0O1xyXG5cdFx0XHR3aGlsZSAocnQgJiYgcnQgIT09IFRISVMuYm9keSkge1xyXG5cdFx0XHRcdGlmIChydCA9PT0gVEhJUy5jdXJyZW50RWxlbWVudCkgcmV0dXJuO1xyXG5cdFx0XHRcdGlmIChydCkgcnQgPSBydC5wYXJlbnROb2RlO1xyXG5cdFx0XHR9XHJcblx0XHRcdFRISVMuY3VycmVudEVsZW1lbnQgPSBudWxsO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHRcclxuXHRyZXR1cm4gVEhJUztcclxufSkoKTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _howler = __webpack_require__(0);\n\n/**\r\n * Управление звуком, например громкостью\r\n */\nexports.default = function SoundControl() {\n\tvar THIS = {};\n\n\tTHIS.init = function () {\n\t\tTHIS.volumeRangeElem = document.querySelector('.js-volume-range');\n\t\tsetRangeValues();\n\t\tvolumeRange();\n\t};\n\n\t/**\r\n  * Получить значение ползунка громкости\r\n  */\n\tTHIS.getRangeValue = function () {\n\t\treturn THIS.volumeRangeElem.value;\n\t};\n\n\tfunction setRangeValues() {\n\t\tTHIS.volumeRangeElem.max = 100;\n\t\tTHIS.volumeRangeElem.min = 0;\n\t\tTHIS.volumeRangeElem.step = 1;\n\t}\n\n\tfunction volumeRange() {\n\t\tif (!THIS.volumeRangeElem) {\n\t\t\tconsole.warn('SoundControl(): can\\'t find range element by class=\"js-volume-range\"');\n\t\t\treturn;\n\t\t}\n\t\tTHIS.volumeRangeElem.addEventListener('input', function (e) {\n\t\t\t_howler.Howler.volume(e.target.value / 100);\n\t\t});\n\t};\n\n\treturn THIS;\n}(); // import AudioManager from './AudioManager';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL2NvcmUvc291bmQvU291bmRDb250cm9sLmpzP2ZiYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IEF1ZGlvTWFuYWdlciBmcm9tICcuL0F1ZGlvTWFuYWdlcic7XHJcbmltcG9ydCB7IEhvd2wsIEhvd2xlciB9IGZyb20gJy4uLy4uL2xpYi9ob3dsZXInO1xyXG5cclxuLyoqXHJcbiAqINCj0L/RgNCw0LLQu9C10L3QuNC1INC30LLRg9C60L7QvCwg0L3QsNC/0YDQuNC80LXRgCDQs9GA0L7QvNC60L7RgdGC0YzRjlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIFNvdW5kQ29udHJvbCgpIHtcclxuXHRjb25zdCBUSElTID0ge307XHJcblxyXG5cdFRISVMuaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0VEhJUy52b2x1bWVSYW5nZUVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtdm9sdW1lLXJhbmdlJyk7XHJcblx0XHRzZXRSYW5nZVZhbHVlcygpO1xyXG5cdFx0dm9sdW1lUmFuZ2UoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiDQn9C+0LvRg9GH0LjRgtGMINC30L3QsNGH0LXQvdC40LUg0L/QvtC70LfRg9C90LrQsCDQs9GA0L7QvNC60L7RgdGC0LhcclxuXHQgKi9cclxuXHRUSElTLmdldFJhbmdlVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHJldHVybiBUSElTLnZvbHVtZVJhbmdlRWxlbS52YWx1ZTtcclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBzZXRSYW5nZVZhbHVlcygpIHtcclxuXHRcdFRISVMudm9sdW1lUmFuZ2VFbGVtLm1heCA9IDEwMDtcclxuXHRcdFRISVMudm9sdW1lUmFuZ2VFbGVtLm1pbiA9IDA7XHJcblx0XHRUSElTLnZvbHVtZVJhbmdlRWxlbS5zdGVwID0gMTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHZvbHVtZVJhbmdlKCkge1xyXG5cdFx0aWYgKCFUSElTLnZvbHVtZVJhbmdlRWxlbSkge1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1NvdW5kQ29udHJvbCgpOiBjYW5cXCd0IGZpbmQgcmFuZ2UgZWxlbWVudCBieSBjbGFzcz1cImpzLXZvbHVtZS1yYW5nZVwiJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdFRISVMudm9sdW1lUmFuZ2VFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcclxuXHRcdFx0SG93bGVyLnZvbHVtZShlLnRhcmdldC52YWx1ZSAvIDEwMCk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gVEhJUztcclxufSkoKTtcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n")}]);